/*!
 * Radiant Media Player 2.6.2 | https://www.radiantmediaplayer.com
 * Copyright (c) 2015-2016 Radiant Media Player 
 * Terms of service: https://www.radiantmediaplayer.com/terms-of-service.html
 * Contact information: https://www.radiantmediaplayer.com/contact.html
 */
! function (a, b) {
    "use strict";
    if (a.RadiantMP = function (a) {
            this.id = a
    }, RadiantMP.prototype._defaults = {
        licenseKey: "",
        width: 640,
        height: 360,
        skin: "s1",
        autoplay: !1,
        poster: "",
        endOfVideoPoster: "",
        loop: !1,
        muted: !1,
        delayToFade: 3e3,
        hideContextMenu: !0,
        logo: "",
        logoLoc: "",
        logoWatermark: !1,
        sharing: !1,
        flashFallBack: !0,
        flashFirst: !1,
        hlsToFlash: !0,
        flashScaleMode: "letterbox",
        flashHlsMinbufferlength: 1,
        flashHlsLowbufferlength: 1,
        flashHlsMaxbufferlength: 300,
        flashCCFontSize: 16,
        flashCCTextColor: "FFFFFF",
        flashCCBgColor: "212121",
        flashCCBgAlpha: .7,
        flashWMode: "direct",
        flashDebug: !1,
        dashDebug: !1,
        dashFirefox: !1,
        debug: !1,
        pathToRmpFiles: "",
        bitrates: {},
        isLive: !1,
        isLiveDvr: !1,
        displayStreams: !0,
        defaultFlashAudioLabel: "English",
        defaultDashAudioTrack: "English",
        ccFiles: null,
        crossorigin: "",
        hasGa: !1,
        trackingId: "",
        gaCategory: "RMP Video title",
        nav: !1,
        hideControls: !1,
        bgVideo: !1,
        bgVideoRendering: "zoom",
        ads: !1,
        adBlockCheck: !1,
        adBlockDisplayMessage: !0,
        adBlockDetectedRestrictive: !1,
        adBlockDetectedRestrictiveMessage: "We have detected a potential ad-blocking software on your device. The site owner requires that you disable this software to view this content. Once this is done you can reload this page to access this content.",
        adBlockDetectedPermissiveMessage: "We have detected a potential ad-blocking software on your device. This site exists thanks to the revenue generated by video ads. We encourage you to disable this software while navigating this site. You can still view this content by clicking the reload button beneath.",
        adFlashVpaidVersion: "1.0",
        adTagUrl: "",
        adImaTest: !1,
        adForceNonLinearFullSlot: !1,
        adFlashTagUrl: "",
        adTagWaterfall: [],
        adFlashTagWaterfall: [],
        adLocale: "en",
        adCustomMessage: "",
        adCountDown: !1,
        adSchedule: null,
        adVpaidMode: "enabled"
    }, "undefined" == typeof rmpEnv) {
        String.prototype.trim || (String.prototype.trim = function () {
            return this.replace(/^\s+|\s+$/g, "")
        }), a.rmpEnv = {
            _getUserAgent: function () {
                return a.navigator.userAgent ? a.navigator.userAgent : null
            },
            _isWindowsPhone: function (a) {
                var b = /windows\s*phone/i;
                return b.test(a)
            },
            _isWindowsPhone8: function (a) {
                var b = /windows\s*phone\s*8\.0/i,
                    c = /iemobile\/10/i;
                return b.test(a) && c.test(a)
            },
            _isIos: function (a, b) {
                var c = !1,
                    d = null,
                    e = [c, d];
                if (b) return e;
                var f = /(ipad|iphone|ipod)/i;
                if (null !== a && f.test(a)) {
                    c = !0;
                    var g = /os\s(\d+)_(\d+)_?(\d+)?/i,
                        h = a.match(g);
                    h && (d = [parseInt(h[1], 10), parseInt(h[2], 10), parseInt(h[3] || 0, 10)]), e = [c, d]
                }
                return e
            },
            _isIphone: function (a, b) {
                if (b) return !1;
                var c = /(iphone|ipod)/i;
                return c.test(a)
            },
            _isMacOSX: function (a, b) {
                var c = /(macintosh|mac os)/i;
                return c.test(a) && !b[0] ? !0 : !1
            },
            _isIe: function (a) {
                var b = !1,
                    c = null,
                    d = /(msie|trident)/i,
                    e = /msie/i;
                if (d.test(a))
                    if (b = !0, e.test(a)) {
                        var f = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
                        null !== a && null !== f.exec(a) && (c = parseFloat(RegExp.$1))
                    } else c = 11;
                return [b, c]
            },
            _isMsEdgeDesktop: function (a) {
                var b = /windows/i,
                    c = /edge\/\d+/i,
                    d = /windows\s*phone/i;
                return d.test(a) ? !1 : b.test(a) && c.test(a) ? !0 : !1
            },
            _isSafari: function (a) {
                var b = /safari/i,
                    c = /chrome/i,
                    d = /chromium/i,
                    e = /android/i;
                return !b.test(a) || c.test(a) || d.test(a) || e.test(a) ? !1 : !0
            },
            _isFirefox: function (a) {
                var b = /firefox\//i,
                    c = /gecko\//i,
                    d = /rv:/i;
                return b.test(a) && c.test(a) && d.test(a) ? !0 : !1
            },
            _isAndroid: function (a, b) {
                var c = !1,
                    d = [null, null, null],
                    e = [c, d];
                if (b) return e;
                var f = /android/i;
                if (null !== a && f.test(a)) {
                    c = !0, f = /android\s(\d+)\.(\d+)\.?(\d+)?/i;
                    var g = a.match(f);
                    g && (d = [parseInt(g[1], 10), parseInt(g[2], 10), parseInt(g[3] || 0, 10)]), e = [c, d]
                }
                return e
            },
            _isAndroidChrome: function (a, b) {
                var c, d = /chrome\/[.0-9]*\s*mobile/i,
                    e = /chrome\/[.0-9]*\s*(?!mobile)/i,
                    f = /version\/(\d+)\.(\d+)/i,
                    g = /chrome\/(\d+)\./i,
                    h = [null];
                null !== a && (c = a.match(g)), c && (h = parseInt(c[1], 10) || 0);
                var i = /firefox\//i,
                    j = /opr\//i;
                if (b[0]) {
                    if (i.test(a) || j.test(a)) return [!1, [h]];
                    if ((d.test(a) || e.test(a)) && !f.test(a)) return [!0, [h]]
                }
                return [!1, [h]]
            },
            _isNativeAndroid: function (a, b, c) {
                if (!b[0] || b[0] && b[1][0] > 4) return !1;
                var d = /applewebkit\//i,
                    e = /mozilla\/5\.0/i,
                    f = /firefox\//i,
                    g = /opr\//i;
                if (b[0]) {
                    if (f.test(a) || g.test(a)) return !1;
                    if (d.test(a) && e.test(a) && !c[0]) return !0
                }
                return !1
            },
            _video5: function (a) {
                return !!a.canPlayType
            },
            _nativeFullscreen: function () {
                return b.documentElement.requestFullscreen || b.documentElement.mozRequestFullScreen || b.documentElement.webkitRequestFullscreen || b.documentElement.msRequestFullscreen ? !0 : !1
            },
            _okMp4: function (a, b) {
                var c = !1;
                if (a) {
                    var d = b.canPlayType("video/mp4");
                    "" !== d && (c = !0)
                }
                return c
            },
            _okDash264: function (b, c, d, e) {
                var f = !1;
                if (d && e) return f;
                if (b) {
                    var g = c.canPlayType('video/mp4; codecs="avc1.640028, mp4a.40.5"');
                    "" !== g && (f = !0);
                    var h = "WebKitMediaSource" in a,
                        i = "MediaSource" in a;
                    return f && (h || i) ? !0 : !1
                }
                return f
            },
            _okHls: function (a, b, c, d) {
                if (c[0] && c[1][0] && c[1][0] < 4) return !1;
                if (d) return !1;
                if (a) {
                    var e = b.canPlayType("application/vnd.apple.mpegurl"),
                        f = b.canPlayType("application/x-mpegurl");
                    if ("" !== e || "" !== f) return !0
                }
                return !1
            },
            _isLegacy: function (a, b, c, d, e) {
                var f = b[0] && b[1][0] && b[1][0] < 4,
                    g = c[0] && c[1][0] && c[1][0] < 8;
                return a && (d || f || g || e) ? !0 : !1
            },
            _getWidthViewport: function () {
                return a.innerWidth || b.documentElement.clientWidth || b.body.clientWidth
            },
            _getHeightViewport: function () {
                return a.innerHeight || b.documentElement.clientHeight || b.body.clientHeight
            }
        };
        var c = rmpEnv._getUserAgent(),
            d = b.createElement("video");
        rmpEnv.video5 = rmpEnv._video5(d), rmpEnv.okMp4 = rmpEnv._okMp4(rmpEnv.video5, d), rmpEnv.isWindowsPhone = rmpEnv._isWindowsPhone(c), rmpEnv.isWindowsPhone8 = rmpEnv._isWindowsPhone8(c), rmpEnv.isMsEdgeDesktop = rmpEnv._isMsEdgeDesktop(c), rmpEnv.isIos = rmpEnv._isIos(c, rmpEnv.isWindowsPhone), rmpEnv.isIphone = rmpEnv._isIphone(c, rmpEnv.isWindowsPhone), rmpEnv.isAndroid = rmpEnv._isAndroid(c, rmpEnv.isWindowsPhone), rmpEnv.isAndroidChrome = rmpEnv._isAndroidChrome(c, rmpEnv.isAndroid), rmpEnv.isNativeAndroid = rmpEnv._isNativeAndroid(c, rmpEnv.isAndroid, rmpEnv.isAndroidChrome), rmpEnv.okHls = rmpEnv._okHls(rmpEnv.video5, d, rmpEnv.isAndroid, rmpEnv.isMsEdgeDesktop), rmpEnv.isMacOSX = rmpEnv._isMacOSX(c, rmpEnv.isIos), rmpEnv.isSafari = rmpEnv._isSafari(c), rmpEnv.isIe = rmpEnv._isIe(c), rmpEnv.isFirefox = rmpEnv._isFirefox(c), rmpEnv.isLegacy = rmpEnv._isLegacy(rmpEnv.video5, rmpEnv.isAndroid, rmpEnv.isIos, rmpEnv.isWindowsPhone8, rmpEnv.isNativeAndroid), rmpEnv.okDash264 = rmpEnv._okDash264(rmpEnv.video5, d, rmpEnv.isMacOSX, rmpEnv.isSafari), rmpEnv.widthViewport = rmpEnv._getWidthViewport(), rmpEnv.heightViewport = rmpEnv._getHeightViewport(), rmpEnv.nativeFullscreen = rmpEnv._nativeFullscreen(), rmpEnv.currentUrl = b.URL, rmpEnv.isMobile = !1, (rmpEnv.isIos[0] || rmpEnv.isAndroid[0] || rmpEnv.isWindowsPhone) && (rmpEnv.isMobile = !0), rmpEnv.fs = {}, rmpEnv.manageFS = {}, rmpEnv.resize = {}, rmpEnv.flash = [], rmpEnv.originalWidthPlayer = [], rmpEnv.ratio = [], rmpEnv.focusFS = ""
    }
    var e = function (b) {
        var c = b,
            d = 0;
        return c || (c = a.event), c.pageX ? d = c.pageX : c.clientX && (d = c.clientX), d
    },
        f = function (b) {
            var c = b,
                d = 0;
            return c || (c = a.event), c.pageY ? d = c.pageY : c.clientX && (d = c.clientY), d
        },
        g = function (a) {
            return "undefined" != typeof a && isFinite(a) && !isNaN(parseFloat(a)) ? !0 : !1
        },
        h = function (a, b) {
            if ("undefined" != typeof a && "object" == typeof b) {
                var c;
                if (a instanceof HTMLCollection && a.length) {
                    for (var d = 0, e = a.length; e > d; d++)
                        if ("undefined" != typeof a[d])
                            for (c in b) a[d].style[c] = b[c]
                } else if ("undefined" != typeof a)
                    for (c in b) a.style[c] = b[c]
            }
        },
        i = function (a, b) {
            "undefined" != typeof a && "string" == typeof b && (a.className ? -1 === a.className.indexOf(b) && (a.className = (a.className + " " + b).replace(/\s\s+/g, " ")) : a.className = b)
        },
        j = function (a, b) {
            "undefined" != typeof a && "string" == typeof b && a.className.indexOf(b) > -1 && (a.className = a.className.replace(b, "").replace(/\s\s+/g, " "))
        },
        k = function (a) {
            "undefined" != typeof a && a.parentNode && a.parentNode.removeChild(a)
        },
        l = function (c, d) {
            var e;
            "undefined" != typeof d && ("function" == typeof a.Event ? (e = new Event(c), d.dispatchEvent(e)) : (e = b.createEvent("Event"), e.initEvent(c, !0, !0), d.dispatchEvent(e)))
        },
        m = function (b) {
            if ("undefined" != typeof b) {
                var c;
                if (b.currentStyle) {
                    c = b.currentStyle.width;
                } else if (a.getComputedStyle) {
                    c = a.getComputedStyle(b, null).getPropertyValue("width");
                }
                //var c = a.getComputedStyle(b).width || 0;
                console.log(typeof c);
                return c.indexOf("px") > -1 && (c = c.replace("px", "")), parseFloat(c)
            }
            return null
        },
        n = function (b) {
            if ("undefined" != typeof b) {
                var c = a.getComputedStyle(b).height || 0;
                return c.indexOf("px") > -1 && (c = c.replace("px", "")), parseFloat(c)
            }
            return null
        },
        o = function (a) {
            if ("undefined" != typeof a) {
                var c, d = a.getBoundingClientRect();
                return c = b.documentElement && b.documentElement.scrollLeft ? b.documentElement.scrollLeft : b.body.scrollLeft, d.left + c || 0
            }
            return null
        },
        p = function (a) {
            if ("undefined" != typeof a) {
                var c, d = a.getBoundingClientRect();
                return c = b.documentElement && b.documentElement.scrollTop ? b.documentElement.scrollTop : b.body.scrollTop, d.top + c || 0
            }
            return null
        },
        q = function (a) {
            "undefined" != typeof a && "block" !== a.style.display && (a.style.display = "block")
        },
        r = function (a) {
            "undefined" != typeof a && "none" !== a.style.display && (a.style.display = "none")
        },
        s = function (a) {
            a.stopPropagation()
        },
        t = function (a) {
            if (g(a)) {
                var b = Math.floor(a % 60),
                    c = Math.floor(1 * a / 60),
                    d = 0;
                return c > 59 && (d = Math.floor(1 * a / 3600), c = Math.floor(1 * a / 3600 % 1 * 60), b = Math.floor(a % 60)), 10 > b && (b = "0" + b), 10 > c && (c = "0" + c), 10 > d && d > 0 ? d += ":" : 0 === d && (d = ""), d + c + ":" + b
            }
            return ""
        },
        u = function (a) {
            return a.charAt(0).toUpperCase() + a.slice(1)
        },
        v = function () {
            j(this.dom.container, "rmp-chrome"), i(this.dom.container, "rmp-no-chrome")
        },
        w = function () {
            this.chromeTimer && clearInterval(this.chromeTimer), this.chromeTimer = setInterval(v.bind(this), this.delayToFade)
        },
        x = function () {
            j(this.dom.container, "rmp-no-chrome"), i(this.dom.container, "rmp-chrome"), w.call(this)
        },
        y = function () {
            this.debug && console.log("RMP: hide loading spin icon"), j(this.dom.container, "rmp-waiting"), r(this.dom.rmpLoadingSpin)
        },
        z = function () {
            this.debug && console.log("RMP: show central play button"), q(this.dom.rmpOverlayButton), y.call(this)
        },
        A = function () {
            this.debug && console.log("RMP: hide central play button"), r(this.dom.rmpOverlayButton)
        },
        B = function () {
            this.debug && console.log("RMP: show loading spin icon"), i(this.dom.container, "rmp-waiting"), q(this.dom.rmpLoadingSpin), A.call(this)
        },
        C = function () {
            this.debug && console.log("RMP: HTML5 pause event"), l("pause", this.dom.container), i(this.dom.rmpPlayPause, "rmp-i-play"), j(this.dom.rmpPlayPause, "rmp-i-pause"), z.call(this), x.call(this)
        },
        D = function () {
            this.debug && console.log("RMP: HTML5 play event"), l("play", this.dom.container), i(this.dom.rmpPlayPause, "rmp-i-pause"), j(this.dom.rmpPlayPause, "rmp-i-play"), A.call(this), null !== this.dom.dashPoster && (this.dom.rmpContent.removeChild(this.dom.dashPoster), this.dom.dashPoster = null), "undefined" != typeof this.dom.endOfVideoPoster && "block" === this.dom.endOfVideoPoster.style.display && (this.dom.endOfVideoPoster.style.display = "none"), x.call(this)
        },
        E = function () {
            this.dom.video.paused ? this.dom.video.play() : this.dom.video.pause()
        },
        F = function (a) {
            a.stopPropagation(), this.debug && console.log("RMP: HTML5 playback requested"), "touchend" === a.type && a.preventDefault(), this.ads && this.adsFirst && "undefined" != typeof google ? (this.initialUserAction(), this.adsFirst = !1, B.call(this)) : this.ads && this.isLinear && this.adsPlaying ? this.adsPaused ? this.adsResume() : this.adsPause() : E.call(this)
        },
        G = function () {
            for (var a = this.dom.video, b = 0, c = a.buffered, d = a.buffered.length, e = a.currentTime, f = 0, g = d - 1; g >= 0; g--)
                if (c.start(g) && e >= c.start(g)) {
                    f = g;
                    break
                }
            d > 0 && (b = c.end(f) / a.duration * 100);
            var i = {
                width: b + "%"
            };
            this.debug && console.log("RMP: loaded progress (%) - " + b), "undefined" != typeof this.dom.rmpLoaded && h(this.dom.rmpLoaded, i)
        },
        H = function (a) {
            var b = this.dom.video,
                c = b.duration * a;
            if (!(0 > c || c > b.duration)) {
                b.currentTime = c;
                var d = {
                    width: 100 * a + "%"
                };
                h(this.dom.rmpCurrent, d);
                var e = {
                    left: 100 * a + "%"
                };
                h(this.dom.rmpHandle, e)
            }
        },
        I = function (a) {
            a.stopPropagation(), "touchstart" === a.type && a.preventDefault(), x.call(this), this.volumeOn ? (this.volumeOn = !1, this.storedVolume = this.dom.video.volume, this.dom.video.volume = 0, this.ads && this.adsPlaying && this.isLinear && this.adsGetVolume() > 0 && (this.storedVolume = this.adsGetVolume(), this.adsSetVolume(0)), i(this.dom.rmpVolume, "rmp-i-volume-off"), j(this.dom.rmpVolume, "rmp-i-volume-up")) : (this.volumeOn = !0, this.dom.video.volume = this.storedVolume, this.ads && this.adsPlaying && this.isLinear && 0 === this.adsGetVolume() && this.adsSetVolume(this.storedVolume), i(this.dom.rmpVolume, "rmp-i-volume-up"), j(this.dom.rmpVolume, "rmp-i-volume-off"))
        },
        J = function () {
            this.rmpVolumeBarHeight || (this.rmpVolumeBarHeight = n(this.dom.rmpVolumeBar)), this.dom.rmpCurrentVolume.style.height = this.dom.video.volume * this.rmpVolumeBarHeight + "px", this.dom.video.volume > 0 && !this.volumeOn ? (i(this.dom.rmpVolume, "rmp-i-volume-up"), j(this.dom.rmpVolume, "rmp-i-volume-off"), this.volumeOn = !0) : 0 === this.dom.video.volume && this.volumeOn && (i(this.dom.rmpVolume, "rmp-i-volume-off"), j(this.dom.rmpVolume, "rmp-i-volume-up"), this.volumeOn = !1), l("volumechange", this.dom.container)
        },
        K = function (a) {
            this.rmpVolumeBarHeight || (this.rmpVolumeBarHeight = n(this.dom.rmpVolumeBar)), this.rmpVolumeBarTop = p(this.dom.rmpVolumeBar);
            var b = f(a) - this.rmpVolumeBarTop,
                c = 1 - b / this.rmpVolumeBarHeight;
            .1 > c ? c = 0 : c > .9 && (c = 1), this.dom.video.volume = c, this.ads && this.adsPlaying && this.isLinear && this.adsSetVolume(c)
        },
        L = function () {
            this.id === rmpEnv.focusFS && this.dom.container && this.dom.html && this.dom.body && (rmpEnv.fs[this.id] ? (rmpEnv.fs[this.id] = !1, l("exitfullscreen", this.dom.container), i(this.dom.rmpFullscreen, "rmp-i-resize-full"), j(this.dom.rmpFullscreen, "rmp-i-resize-small"), j(this.dom.container, "rmp-fullscreen-on"), j(this.dom.html, "rmp-context-fullscreen-on"), j(this.dom.body, "rmp-context-fullscreen-on")) : (rmpEnv.fs[this.id] = !0, l("enterfullscreen", this.dom.container), i(this.dom.rmpFullscreen, "rmp-i-resize-small"), j(this.dom.rmpFullscreen, "rmp-i-resize-full"), i(this.dom.container, "rmp-fullscreen-on"), i(this.dom.html, "rmp-context-fullscreen-on"), i(this.dom.body, "rmp-context-fullscreen-on")), this.ads && this.adsPlaying && this.resizeAds())
        },
        M = function () {
            var a, b, c, d = this.id,
                e = this.dom.container,
                f = e.parentElement,
                g = m(e);
            if ("undefined" != typeof f) {
                var k = m(f);
                if (k >= rmpEnv.originalWidthPlayer[d]) {
                    if (!(k > g)) return;
                    b = rmpEnv.originalWidthPlayer[d], c = Math.round(rmpEnv.originalWidthPlayer[d] / rmpEnv.ratio[d]), a = {
                        width: b + "px",
                        height: c + "px"
                    }
                } else b = k, c = Math.round(k / rmpEnv.ratio[d]), a = {
                    width: b + "px",
                    height: c + "px"
                };
                b && c && (b !== this.widthPlayer || c !== this.heightPlayer) && (h(e, a), this.widthPlayer = b, this.heightPlayer = c, this.dom.video && (b > 0 && 320 > b ? (i(e, "rmp-xs"), i(e, "rmp-nano")) : b > 0 && 480 > b ? (j(e, "rmp-nano"), i(e, "rmp-xs")) : (j(e, "rmp-xs"), j(e, "rmp-nano"))), this.ads && this.adsPlaying && this.resizeAds(), this.debug && console.log("RMP: resizePlayer - new dimension: " + b + "x" + c))
            }
        },
        N = function () {
            this.debug && console.log("RMP: HTML5 ended event"), z.call(this), i(this.dom.rmpPlayPause, "rmp-i-play"), j(this.dom.rmpPlayPause, "rmp-i-pause"), this.dom.video.paused || this.dom.video.pause(), 0 !== this.dom.video.currentTime && (this.dom.video.currentTime = 0), "" !== this.poster && ("" !== this.endOfVideoPoster && (this.poster = this.endOfVideoPoster), "undefined" == typeof this.dom.endOfVideoPoster && (this.dom.endOfVideoPoster = b.createElement("img"), this.dom.endOfVideoPoster.className = "rmp-ended-poster", this.dom.endOfVideoPoster.src = this.poster, this.dom.rmpContent.appendChild(this.dom.endOfVideoPoster)), this.dom.endOfVideoPoster.style.display = "block"), this.ads && this.contentEnded(), l("ended", this.dom.container)
        },
        O = function () {
            var a = function (a) {
                var b = e(a) - o(this.dom.rmpTimeTotal),
                    c = m(this.dom.rmpTimeTotal);
                0 > b ? b = 0 : b >= c && (b = c), this.dom.rmpIndicator.style.left = b + "px";
                var d = this.dom.video.duration,
                    f = b / c,
                    g = f * d;
                g >= d ? g = d : 0 > g && (g = 0), this.dom.rmpIndicator.firstChild.textContent = t(g)
            };
            this.dom.rmpSeekBar.addEventListener("mousemove", a.bind(this));
            var b = function () {
                this.dom.rmpIndicator.style.display = "block"
            };
            this.dom.rmpSeekBar.addEventListener("mouseenter", b.bind(this));
            var c = function () {
                this.dom.rmpIndicator.style.display = "none"
            };
            this.dom.rmpSeekBar.addEventListener("mouseleave", c.bind(this))
        },
        P = function (b, c) {
            c.stopPropagation(), "touchstart" === c.type && (c.preventDefault(), x.call(this)), this.dom.video.paused || this.dom.video.pause(), a.open(b, "_blank")
        },
        Q = function (a) {
            var b = this.dom.video,
                c = b.paused;
            !c && rmpEnv.isIos[0] && b.pause(), b.playbackRate = a, !c && rmpEnv.isIos[0] && b.play()
        },
        R = function (a) {
            switch (this.currentTime = this.dom.video.currentTime, this.volumeNow = this.dom.video.volume, this.ads && this.adsPlaying && this.isLinear && (this.volumeNow = this.adsGetVolume()), a.which) {
                case 32:
                    a.preventDefault(), l("click", this.dom.rmpPlayPause);
                    break;
                case 70:
                    a.preventDefault(), l("click", this.dom.rmpFullscreen);
                    break;
                case 37:
                    a.preventDefault(), this.dom.video.currentTime = this.currentTime - 10;
                    break;
                case 39:
                    a.preventDefault(), this.dom.video.currentTime = this.currentTime + 10;
                    break;
                case 38:
                    a.preventDefault(), this.volumeNow <= .9 ? this.dom.video.volume = this.volumeNow + .1 : this.dom.video.volume = 1, this.ads && this.adsPlaying && this.isLinear && this.adsSetVolume(this.dom.video.volume), this.storedVolume = this.dom.video.volume;
                    break;
                case 40:
                    a.preventDefault(), this.volumeNow > .1 ? this.dom.video.volume = this.volumeNow - .1 : this.dom.video.volume = 0, this.ads && this.adsPlaying && this.isLinear && this.adsSetVolume(this.dom.video.volume), this.storedVolume = this.dom.video.volume;
                    break;
                default:
                    return
            }
        },
        S = function () {
            ! function (a, b, c, d, e, f, g) {
                a.GoogleAnalyticsObject = e, a[e] = a[e] || function () {
                    (a[e].q = a[e].q || []).push(arguments)
                }, a[e].l = 1 * new Date, f = b.createElement(c), g = b.getElementsByTagName(c)[0], f.async = 1, f.src = d, g.parentNode.insertBefore(f, g)
            }(a, b, "script", "//www.google-analytics.com/analytics.js", "ga"), ga("create", this.trackingId), ga("send", "pageview");
            var c = !0,
                d = !0,
                e = !0,
                f = !0,
                g = !0,
                h = function () {
                    c && (ga("send", "event", this.gaCategory, "percentWatched", "Percent viewed (HTML5):100"), c = !1)
                },
                i = function () {
                    var a = this.dom.video.currentTime,
                        b = this.dom.video.duration;
                    a && b && !this.isLive && !this.isLiveDvr && (a > 75 * b / 100 && f ? (ga("send", "event", this.gaCategory, "percentWatched", "Percent viewed (HTML5):75"), f = !1) : a > 50 * b / 100 && e ? (ga("send", "event", this.gaCategory, "percentWatched", "Percent viewed (HTML5):50"), e = !1) : a > 25 * b / 100 && d && (ga("send", "event", this.gaCategory, "percentWatched", "Percent viewed (HTML5):25"), d = !1), this.dom.video.addEventListener("ended", h.bind(this)))
                };
            this.dom.video.addEventListener("timeupdate", i.bind(this));
            var j = function () {
                g && (ga("send", "event", this.gaCategory, "percentWatched", "Percent viewed (HTML5):0"), g = !1)
            };
            this.dom.video.addEventListener("play", j.bind(this))
        },
        T = function (a) {
            console.log("RMP: error detected at video tag level. Playback may or may not continue."), console.log(a)
        },
        U = function () {
            this.dom.video = null, this.isHTML5 = !1, this.isFlash = !1;
            var a = this.dom.container.getElementsByTagName("rmp-content")[0];
            a && this.dom.container.removeChild(a);
            var b = this.dom.container.getElementsByClassName("rmp-loading-spin")[0];
            b && this.dom.container.removeChild(b);
            var c = this.dom.container.getElementsByClassName("rmp-overlay-button")[0];
            c && this.dom.container.removeChild(c), this.bgVideo && i(this.dom.container, "rmp-bg-wrapper");
            var d, e = '<div class="rmp-no-play"><div>No playback support',
                f = this.bitrates.mp4;
            f && f[0][1] && (d = f[0][1]), !d || this.isLive || this.isLiveDvr || (e += '<br>Download video <a class="rmp-dl-link" target="_blank" href="' + d + '">here</a></div>'), e += "</div>", this.dom.container.innerHTML = e, M.call(this), l("ready", this.dom.container)
        },
        V = function (a) {
            if (a && a.target) {
                a.stopPropagation(), "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.captionMenuButtons.forEach(function (a) {
                    a.setAttribute("data-state", "inactive")
                });
                for (var b = a.target, c = b.getAttribute("lang"), d = 0; d < this.textTracks.length; d++) b.className.indexOf("captions-off") > -1 && b.setAttribute("data-state", "active"), this.textTracks[d].language === c ? (rmpEnv.isIe[0] && 10 === rmpEnv.isIe[1] ? this.textTracks[d].mode = "2" : this.textTracks[d].mode = "showing", b.setAttribute("data-state", "active")) : rmpEnv.isIe[0] && 10 === rmpEnv.isIe[1] ? this.textTracks[d].mode = "1" : this.textTracks[d].mode = "hidden"
            }
        },
        W = function (a, c, d, e) {
            var f = b.createElement("li"),
                g = f.appendChild(b.createElement("div"));
            return g.className = a + " captions-button", c.length > 0 && g.setAttribute("lang", c), g.value = d, e === this.defaultTrack ? (g.setAttribute("data-state", "active"), "captions-off" !== a && e - 1 > -1 && (this.textTracks[e - 1].mode = "showing")) : g.setAttribute("data-state", "inactive"), g.appendChild(b.createTextNode(d)), g.addEventListener("touchstart", V.bind(this)), g.addEventListener("click", V.bind(this)), this.captionMenuButtons.push(g), f
        },
        X = function (a) {
            a.stopPropagation(), "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.dom.rmpOuterHd && "none" !== this.dom.rmpOuterHd.style.display && (this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1), this.dom.rmpPlayback && "none" !== this.dom.rmpPlayback.style.display && (this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1), this.dom.rmpAreaSharing && "none" !== this.dom.rmpAreaSharing.style.display && (this.dom.rmpAreaSharing.style.display = "none", this.rmpAreaSharingVisible = !1), this.dom.rmpOuterAudios && "none" !== this.dom.rmpOuterAudios.style.display && (this.dom.rmpOuterAudios.style.display = "none", this.rmpOuterAudiosVisible = !1), this.dom.captionsMenu && (this.captionsMenuVisible ? (this.dom.captionsMenu.style.display = "none", this.captionsMenuVisible = !1) : (this.dom.captionsMenu.style.display = "block", this.captionsMenuVisible = !0))
        },
        Y = function () {
            if (this.textTracks && this.textTracks.length) {
                this.captionMenuButtons = [];
                var a = b.createDocumentFragment();
                this.captionsMenuVisible = !1, this.dom.captionsMenu = a.appendChild(b.createElement("ul")), this.dom.captionsMenu.style.display = "none", this.dom.captionsMenu.className = "rmp-cc-menu", this.dom.captionsMenu.appendChild(W.call(this, "captions-off", "off", "Off", 0));
                for (var c = 0; c < this.textTracks.length; c++) "captions" === this.textTracks[c].kind && this.dom.captionsMenu.appendChild(W.call(this, "captions-" + this.textTracks[c].language, this.textTracks[c].language, this.textTracks[c].label, c + 1));
                this.dom.rmpCC && (this.dom.rmpCC.appendChild(this.dom.captionsMenu), this.dom.captionsMenu = this.dom.container.getElementsByClassName("rmp-cc-menu")[0], this.dom.captionsMenu.addEventListener("click", s), this.dom.rmpCC.addEventListener("touchstart", X.bind(this)), this.dom.rmpCC.addEventListener("click", X.bind(this)))
            }
        },
        Z = function () {
            var a, c = this.ccFiles;
            if (this.textTracks = this.dom.video.textTracks, this.defaultTrack = 0, c && c[0] instanceof Array && c.length)
                for (var d = 0; d < c.length; d++) a = b.createElement("track"), "string" == typeof c[d][1] && "string" == typeof c[d][1] && "string" == typeof c[d][2] && (a.srclang = c[d][0], a.label = c[d][1], a.src = c[d][2], a.kind = "captions", this.dom.video.appendChild(a)), "undefined" != typeof c[d][3] && "default" === c[d][3] && (this.defaultTrack = d + 1);
            for (var e = 0; e < this.textTracks.length; e++) this.textTracks[e].mode = "hidden";
            var f = this,
                g = 0,
                h = setInterval(function () {
                    f.textTracks.length >= c.length && (clearInterval(h), Y.call(f)), g++, g > 100 && clearInterval(h)
                }, 100)
        },
        $ = function () {
            var a = this.dom.container;
            if (a.removeEventListener("fiveready", this.doReady), this.hideControls)
                for (var b = this.dom.container.childNodes, c = 0; c < b.length; c++) {
                    var d = b[c].className.toLowerCase();
                    "rmp" !== d && "rmp-content" !== d && "rmp-ad-container" !== d && "rmp-loading-spin" !== d && i(b[c], "rmp-no-controls")
                }
            M.call(this), this.debug && console.log("RMP: HTML5 player DOM ready event")
        },
        _ = function () {
            this.dom.video.controls = "", this.readyFired = !1, this.autoplay && !this.ads && (this.dom.video.autoplay = "autoplay"), this.loop && (this.dom.video.loop = "loop"), this.muted && (this.dom.video.muted = "muted"), "" !== this.crossorigin && this.dom.video.setAttribute("crossorigin", this.crossorigin), this.dom.video.setAttribute("x-webkit-airplay", "allow"), this.dom.video.setAttribute("webkit-playsinline", !0), this.dom.video.preload = "metadata", this.dom.video.defaultPlaybackRate = 1, this.dom.video.poster = this.poster, this.loadstart = !1;
            var c = function () {
                this.loadstart = !0
            };
            this.dom.video.addEventListener("loadstart", c.bind(this));
            var d = function () {
                var a = this.dom.video.duration;
                if (this.debug && console.log("RMP: HTML5 durationchange event - " + a), l("durationchange", this.dom.container), this.dom.rmpDuration && this.dom.rmpTimeElapsed) {
                    if (this.isLiveDvr) {
                        if (!g(a)) return r(this.dom.rmpDuration), r(this.dom.rmpSeekBar), this.dom.rmpTimeElapsed.textContent = "Live", void (this.isVodDvr = !1);
                        q(this.dom.rmpDuration), q(this.dom.rmpSeekBar), j(this.dom.container, "rmp-live"), this.isVodDvr = !0
                    }
                    this.dom.rmpDuration && g(a) && (this.dom.rmpDuration.innerHTML = t(a))
                }
                "undefined" != typeof this.dom.rmpTimeElapsed && (this.isLive ? this.dom.rmpTimeElapsed.textContent = "Live" : this.dom.rmpTimeElapsed.textContent = "00:00")
            };
            this.isVodDvr = !1, this.dom.video.addEventListener("durationchange", d.bind(this));
            var e = function () {
                if (this.dom.container.removeEventListener("ready", this.postReady), j(this.dom.container, "rmp-preparing"), this.autoplay || z.call(this), y.call(this), this.nav && q(this.dom.rmpNav), this.ads && q(this.dom.rmpAdContainer), this.logo && q(this.dom.rmpLogo), this.ads && this.autoplay && this.dom.rmpPlayPause)
                    if (this.adsInit) l("click", this.dom.rmpPlayPause);
                    else var a = this,
                        b = 0,
                        c = setInterval(function () {
                            a.adsInit && (l("click", a.dom.rmpPlayPause), clearInterval(c)), b++, b > 50 && clearInterval(c)
                        }, 200);
                l("mousemove", this.dom.container)
            };
            this.postReady = e.bind(this), this.dom.container.addEventListener("ready", this.postReady);
            var f = !1;
            this.loadedMetadata = !1;
            var h = function () {
                this.dom.video.removeEventListener("loadedmetadata", this.loadedMetadataFn), this.debug && console.log("RMP: HTML5 loadedmetadata event"), !f && this.hasCC && (f = !0, Z.call(this)), this.dom5Ready && !this.readyFired && (this.readyFired = !0, l("ready", this.dom.container)), this.loadedMetadata = !0, l("loadedmetadata", this.dom.container)
            };
            this.loadedMetadataFn = h.bind(this), this.dom.video.addEventListener("loadedmetadata", this.loadedMetadataFn);
            var k = function (a) {
                "undefined" == typeof this.dom.rmpLoaded && (this.dom.rmpLoaded = this.dom.container.getElementsByClassName("rmp-loaded")[0]), "loadeddata" === a.type ? (l("loadeddata", this.dom.container), this.debug && console.log("RMP: HTML5 loadeddata event")) : "progress" === a.type && l("progress", this.dom.container), G.call(this)
            };
            this.dom.video.addEventListener("loadeddata", k.bind(this)), this.dom.video.addEventListener("progress", k.bind(this));
            var m = this;
            this.dom.video.addEventListener("canplay", function () {
                m.debug && console.log("RMP: HTML5 canplay event"), l("canplay", m.dom.container)
            }), this.dom.video.addEventListener("canplaythrough", function () {
                m.debug && console.log("RMP: HTML5 canplaythrough event"), l("canplaythrough", m.dom.container)
            });
            var n = function () {
                this.debug && console.log("RMP: HTML5 playing event"), y.call(this), l("playing", this.dom.container)
            };
            this.dom.video.addEventListener("playing", n.bind(this));
            var o = function () {
                this.debug && console.log("RMP: HTML5 waiting event"), B.call(this), l("waiting", this.dom.container)
            };
            this.dom.video.addEventListener("waiting", o.bind(this));
            var p = function () {
                if (this.debug && console.log("RMP: HTML5 seeking event"), this.seekStarted = !0, B.call(this), this.readingDash264 && this.dom.video.paused) {
                    this.dashSeekCheck && clearTimeout(this.dashSeekCheck);
                    var a = this;
                    this.dashSeekCheck = setTimeout(function () {
                        a.seekStarted && s.call(a), a.debug && console.log("RMP: corrective measure for seeking taken (Dash264)")
                    }, 5e3)
                }
                l("seeking", this.dom.container)
            };
            this.seekStarted = !1, this.dom.video.addEventListener("seeking", p.bind(this));
            var s = function () {
                this.debug && console.log("RMP: HTML5 seeked event"), this.seekStarted = !1, this.dashSeekCheck && clearTimeout(this.dashSeekCheck), y.call(this), this.dom.video.paused && z.call(this), l("seeked", this.dom.container)
            };
            this.dom.video.addEventListener("seeked", s.bind(this)), this.endedRmp = N.bind(this), this.dom.video.addEventListener("ended", this.endedRmp), this.dom.video.addEventListener("abort", function () {
                m.debug && console.log("RMP: HTML5 abort event"), l("abort", m.dom.container)
            });
            var u = function (a) {
                this.debug && T(a), l("error", this.dom.container)
            };
            if (this.error5Fn = u.bind(this), this.dom.video.addEventListener("error", this.error5Fn), this.dom.video.addEventListener("emptied", function () {
                    m.debug && console.log("RMP: HTML5 emptied event")
            }), this.dom.video.addEventListener("stalled", function () {
                    m.debug && console.log("RMP: HTML5 stalled event"), l("stalled", m.dom.container)
            }), this.dom.video.addEventListener("suspend", function () {
                    m.debug && console.log("RMP: HTML5 suspend event"), l("suspend", m.dom.container)
            }), this.dom.video.addEventListener("ratechange", function () {
                    m.debug && console.log("RMP: HTML5 ratechange event"), l("ratechange", m.dom.container)
            }), this.adsInit = !1, this.ads)
                if (this.adBlockCheck)
                    if ("undefined" == typeof blockAdBlock) {
                        var v = "//cdn.radiantmediatechs.com/rmp/2.6.2/js/rmp-blockadblock.min.js",
                            w = b.createElement("script");
                        w.src = v, w.addEventListener("load", this.adsBlockCheck.bind(this));
                        var x = function () {
                            console.log("RMP: could not retrieve adBlockCheck file > loading ads anyway"), this.callAds()
                        };
                        w.addEventListener("error", x.bind(this)), this.dom.head.appendChild(w)
                    } else blockAdBlock.clearEvent(), blockAdBlock.onDetected(this.adBlockDetected.bind(this)), blockAdBlock.onNotDetected(this.adBlockNotDetected.bind(this)), blockAdBlock.check();
                else this.callAds();
            this.doReady = $.bind(this), this.dom.container.addEventListener("fiveready", this.doReady);
            var A = function () {
                this.playerFontLoaded = !0
            };
            if ("boolean" != typeof this.playerFontLoaded) {
                a.WebFontConfig = {
                    google: {
                        families: ["Roboto:500:latin"]
                    }
                };
                var C = b.createElement("script");
                C.src = ("https:" === b.location.protocol ? "https" : "http") + "://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js", C.type = "text/javascript", C.async = "true", C.addEventListener("load", A.bind(this));
                var D = b.getElementsByTagName("script")[0];
                D.parentNode.insertBefore(C, D)
            }
            this.dom.rmpContent = b.createElement("div"), i(this.dom.rmpContent, "rmp-content"), this.dom.rmpContent.appendChild(this.dom.video), this.dom.container.insertBefore(this.dom.rmpContent, this.dom.container.firstChild)
        },
        aa = function (a, b) {
            this.dom.video.removeEventListener("loadedmetadata", this.afterSwitch);
            var c = this,
                d = 0,
                e = setInterval(function () {
                    a ? (c.dom.video.currentTime = b, y.call(c), clearInterval(e)) : (!a && c.dom.video.paused && c.dom.video.play(), c.dom.video.currentTime && c.dom.video.currentTime > 0 && (c.dom.video.currentTime = b, y.call(c), clearInterval(e))), d++, d > 100 && (c.dom.video.currentTime = b, y.call(c), clearInterval(e))
                }, 200)
        },
        ba = function (a, b) {
            b.stopPropagation(), "touchstart" === b.type && (b.preventDefault(), x.call(this));
            var c = this.dom.video.paused,
                d = this.dom.video.currentTime;
            B.call(this), this.afterSwitch = aa.bind(this, c, d), this.dom.video.addEventListener("loadedmetadata", this.afterSwitch), this.dom.video.src = this.dom.qualities[a].getAttribute("data-src");
            for (var e = 0; e < this.dom.qualities.length; e++) j(this.dom.qualities[e], "rmp-quality-active");
            i(this.dom.qualities[a], "rmp-quality-active")
        },
        ca = function (a) {
            "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.dom.captionsMenu && "none" !== this.dom.captionsMenu.style.display && (this.dom.captionsMenu.style.display = "none", this.captionsMenuVisible = !1), this.dom.rmpPlayback && "none" !== this.dom.rmpPlayback.style.display && (this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1), this.dom.rmpAreaSharing && "none" !== this.dom.rmpAreaSharing.style.display && (this.dom.rmpAreaSharing.style.display = "none", this.rmpAreaSharingVisible = !1), this.dom.rmpOuterAudios && "none" !== this.dom.rmpOuterAudios.style.display && (this.dom.rmpOuterAudios.style.display = "none", this.rmpOuterAudiosVisible = !1), this.dom.rmpOuterHd && (this.rmpOuterHdVisible ? (this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1) : (this.dom.rmpOuterHd.style.display = "block", this.rmpOuterHdVisible = !0))
        },
        da = function () {
            if (this.dom.rmpOuterHd && this.dom.rmpHd) {
                this.dom.rmpOuterHd.addEventListener("click", function (a) {
                    a.stopPropagation()
                }), this.dom.rmpHd.addEventListener("touchstart", ca.bind(this)), this.dom.rmpHd.addEventListener("click", ca.bind(this)), this.dom.qualities = this.dom.container.getElementsByClassName("rmp-quality");
                for (var a = 0; a < this.dom.qualities.length; a++) this.dom.qualities[a].addEventListener("click", ba.bind(this, a)), this.dom.qualities[a].addEventListener("touchstart", ba.bind(this, a))
            }
        },
        ea = function (a, b) {
            if (b.stopPropagation(), "touchstart" === b.type && (b.preventDefault(), x.call(this)), this.dashPlayer) {
                if (this.debug && console.log("RMP: current Dash index quality: " + this.dashPlayer.getQualityFor("video")), 0 === a ? this.dashPlayer.setAutoSwitchQuality(!0) : (this.dashPlayer.setAutoSwitchQuality(!1), this.dashPlayer.setQualityFor("video", a - 1)), this.dom.qualities && this.dom.qualities.length > 0) {
                    for (var c = 0, d = this.dom.qualities.length; d > c; c++) j(this.dom.qualities[c], "rmp-quality-active");
                    i(this.dom.qualities[a], "rmp-quality-active")
                }
                this.debug && console.log("RMP: new Dash index quality: " + this.dashPlayer.getQualityFor("video"))
            }
        },
        fa = function () {
            if (!this.dashStreamInitialized && this.dashPlayer) {
                this.dashStreamInitialized = !0;
                var a = this.dashPlayer.getBitrateInfoListFor("video");
                if (this.debug && console.log(a), !this.dom.rmpHd || !this.dom.rmpOuterHd || !a) return;
                this.dom.rmpHd.addEventListener("touchstart", ca.bind(this)), this.dom.rmpHd.addEventListener("click", ca.bind(this));
                var c = this.dom.container.getElementsByClassName("rmp-q0")[0];
                c.addEventListener("touchstart", ea.bind(this, 0)), c.addEventListener("click", ea.bind(this, 0));
                for (var d = 0, e = a.length; e > d; d++) {
                    var f = b.createElement("div"),
                        g = a[d].qualityIndex + 1;
                    f.className = "rmp-quality rmp-q" + (d + 1);
                    var h;
                    if (!a[d].height) return;
                    h = a[d].height + "p", f.textContent = h, f.addEventListener("touchstart", ea.bind(this, g)), f.addEventListener("click", ea.bind(this, g)), this.dom.rmpOuterHd.appendChild(f)
                }
                this.dom.qualities = this.dom.container.getElementsByClassName("rmp-quality")
            }
        },
        ha = function (a) {
            a.stopPropagation(), "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.dom.captionsMenu && "none" !== this.dom.captionsMenu.style.display && (this.dom.captionsMenu.style.display = "none", this.captionsMenuVisible = !1), this.dom.rmpPlayback && "none" !== this.dom.rmpPlayback.style.display && (this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1), this.dom.rmpOuterHd && "none" !== this.dom.rmpOuterHd.style.display && (this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1), this.dom.rmpOuterAudios && ("none" === this.dom.rmpOuterAudios.style.display ? (this.dom.rmpOuterAudios.style.display = "block", this.rmpOuterAudiosVisible = !1) : (this.dom.rmpOuterAudios.style.display = "none", this.rmpOuterAudiosVisible = !1))
        },
        ia = function (a, b) {
            b.stopPropagation(), "touchstart" === b.type && b.preventDefault();
            var c = this.dashPlayer.getTracksFor("audio");
            if (this.dom.rmpAudiosItem && this.dom.rmpAudiosItem.length && this.dom.rmpAudiosItem.length > 1) {
                for (var d = 0; d < this.dom.rmpAudiosItem.length; d++) j(this.dom.rmpAudiosItem[d], "rmp-audios-item-active");
                i(this.dom.rmpAudiosItem[a], "rmp-audios-item-active");
                try {
                    this.dashPlayer.setCurrentTrack(c[a])
                } catch (e) {
                    console.log(e)
                }
            }
        },
        ja = function (a, c) {
            null === a && T(c);
            var d = this.dashPlayer.getTracksForTypeFromManifest("audio", a);
            if (d && d.length && d.length > 1) {
                this.rmpOuterAudiosVisible = !1, this.dom.rmpAudios = b.createElement("div"), this.dom.rmpAudios.className = "rmp-audios rmp-module", this.dom.container.appendChild(this.dom.rmpAudios);
                var e = '<div class="rmp-module-button"><span class="rmp-i rmp-i-audios"></span></div><div class="rmp-outer-audios"></div>';
                this.dom.rmpAudios.insertAdjacentHTML("beforeend", e), this.dom.rmpOuterAudios = this.dom.container.getElementsByClassName("rmp-outer-audios")[0], this.dom.rmpOuterAudios.style.display = "none";
                for (var f, g = 0; g < d.length; g++) f = b.createElement("div"), 0 === g ? f.className = "rmp-audios-item rmp-audios-item-active" : f.className = "rmp-audios-item", d[g].lang ? f.textContent = u(d[g].lang) : f.textContent = "Audio " + g, f.addEventListener("touchstart", ia.bind(this, g)), f.addEventListener("click", ia.bind(this, g)), this.dom.rmpOuterAudios.appendChild(f);
                this.dom.rmpAudiosItem = this.dom.rmpOuterAudios.getElementsByClassName("rmp-audios-item"), this.dom.rmpAudios.addEventListener("touchstart", ha.bind(this)), this.dom.rmpAudios.addEventListener("click", ha.bind(this)), this.dashPlayer.setInitialMediaSettingsFor("audio", {
                    lang: this.defaultDashAudioTrack
                })
            }
        },
        ka = function () {
            this.dashContext = new Dash.di.DashContext, this.dashPlayer = new MediaPlayer(this.dashContext), this.dashPlayer.startup(), this.dashDebug ? this.dashPlayer.debug.setLogToBrowserConsole(!0) : this.dashPlayer.debug.setLogToBrowserConsole(!1), this.autoplay && !this.ads ? this.dashPlayer.setAutoPlay(!0) : this.dashPlayer.setAutoPlay(!1), this.dashStreamInitialized = !1, this.displayStreams && this.dashPlayer.addEventListener("streaminitialized", fa.bind(this)), this.dashPlayer.retrieveManifest(this.startingBitratePath, ja.bind(this)), this.dashPlayer.attachView(this.dom.video), this.dashPlayer.attachSource(this.startingBitratePath), this.autoplay || (this.dom.dashPoster = b.createElement("img"), this.dom.dashPoster.className = "rmp-dash-poster", this.dom.dashPoster.src = this.poster, this.dom.rmpContent.appendChild(this.dom.dashPoster))
        },
        la = function () {
            if ("undefined" != typeof Dash) ka.call(this);
            else {
                var a = "//cdn.radiantmediatechs.com/rmp/2.6.2/dash/rmp-dash.min.js",
                    c = b.createElement("script");
                c.src = a, c.addEventListener("load", ka.bind(this)), c.addEventListener("error", function () {
                    console.log("RMP: failed to download Dash JavaScript decoder")
                }), this.dom.head.appendChild(c)
            }
        },
        ma = function () {
            this.dom.video.setAttribute("src", this.startingBitratePath)
        },
        na = function () {
            var c = this,
                d = {},
                e = this.dom.container;
            this.bgVideo && i(e, "rmp-bg-wrapper");
            var f = b.createElement("div"),
                g = "rmp-" + this.id;
            f.id = g, e.appendChild(f);
            var h = Math.round(this.delayToFade / 1e3);
            rmpEnv.flash["rmp-" + this.id] = null, this.playSent = !1, this.completeSent = !1, this.flashReady = !1, this.flashNeverPlayed = !0, a.onRmpFlashJavaScriptBridgeCreated = function (a, d) {
                if (c.debug && console.log("RMP: Flash - " + d), "onJavaScriptBridgeCreated" === d && null === rmpEnv.flash[a]) return rmpEnv.flash[a] = b.getElementById(a), void (c.hlsToFlash && c.hasHls || !c.hasMp4 || c.flashReady || (l("ready", rmpEnv.flash[a].parentNode), c.flashReady = !0));
                if ("durationchange" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode) {
                    var e = rmpEnv.flash[a].getDuration();
                    if (isNaN(e)) return;
                    return void l("durationchange", rmpEnv.flash[a].parentNode)
                }
                return "play" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? (c.flashNeverPlayed && (c.flashNeverPlayed = !1), void (c.playSent || (c.playSent = !0, l("play", rmpEnv.flash[a].parentNode), l("playing", rmpEnv.flash[a].parentNode), setTimeout(function () {
                    c.playSent = !1
                }, 300)))) : "pause" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("pause", rmpEnv.flash[a].parentNode) : "timeupdate" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("timeupdate", rmpEnv.flash[a].parentNode) : "complete" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void (c.completeSent || (c.completeSent = !0, l("ended", rmpEnv.flash[a].parentNode), setTimeout(function () {
                    c.completeSent = !1
                }, 300))) : "loadedmetadata" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? (c.hlsToFlash && c.hasHls && !c.flashReady && (l("ready", rmpEnv.flash[a].parentNode), c.flashReady = !0), void l("loadedmetadata", rmpEnv.flash[a].parentNode)) : "waiting" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("waiting", rmpEnv.flash[a].parentNode) : "seeking" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("seeking", rmpEnv.flash[a].parentNode) : "seeked" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("seeked", rmpEnv.flash[a].parentNode) : "volumechange" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("volumechange", rmpEnv.flash[a].parentNode) : "progress" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("progress", rmpEnv.flash[a].parentNode) : "mediaError" === d && null !== rmpEnv.flash[a] && rmpEnv.flash[a].parentNode ? void l("error", rmpEnv.flash[a].parentNode) : void 0
            }, a.onRmpFlashEnterFullscreen = function (a) {
                l("enterfullscreen", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashExitFullscreen = function (a) {
                l("exitfullscreen", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashError = function (a) {
                l("error", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdContentPauseRequested = function (a) {
                l("adContentPauseRequested", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdContentResumeRequested = function (a) {
                l("adContentResumeRequested", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdResumed = function (a) {
                l("adResumed", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdPaused = function (a) {
                l("adPaused", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdFirstQuartile = function (a) {
                l("adFirstQuartile", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdMidPoint = function (a) {
                l("adMidPoint", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdThirdQuartile = function (a) {
                l("adThirdQuartile", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdCompleted = function (a) {
                l("adComplete", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdSkipped = function (a) {
                l("adSkipped", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdUserClosed = function (a) {
                l("adUserClose", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdLoaded = function (a) {
                l("adLoaded", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdStarted = function (a) {
                l("adStarted", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdAllAdsCompleted = function (a) {
                l("adAllAdsCompleted", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdClick = function (a) {
                l("adClick", rmpEnv.flash[a].parentNode)
            }, a.onRmpFlashAdError = function (a) {
                l("adError", rmpEnv.flash[a].parentNode)
            };
            var k = "recorded";
            this.isLive && (k = "live");
            var m = this.loop.toString(),
                n = this.autoplay.toString(),
                o = this.muted.toString();
            this.isLiveDvr && (k = "dvr"), ("s1" === this.skin || "s2" === this.skin) && (d.controlBarMode = "floating"), this.displayStreams && (d.displayStreams = "true");
            var p = !1,
                q = !1;
            if (("s2" === this.skin || "s4" === this.skin) && (p = !0), "s5" === this.skin && (q = !0), d.controlBarAutoHideTimeout = h, d.poster = encodeURIComponent(this.poster), "" !== this.endOfVideoPoster && (d.endOfVideoOverlay = encodeURIComponent(this.endOfVideoPoster)), d.loop = m, d.hideControls = this.hideControls.toString(), d.autoPlay = n, d.muted = o, d.lightTheme = p.toString(), d.orangeTheme = q.toString(), d.streamType = k, d.scaleMode = this.flashScaleMode, this.flashDebug && (d.rmpDebug = "true"), this.sharing && rmpEnv.currentUrl && (d.sharing = this.sharing.toString(), d.documentUrl = encodeURIComponent(rmpEnv.currentUrl)), d.javascriptCallbackFunction = "onRmpFlashJavaScriptBridgeCreated", this.hlsToFlash && this.hasHls) {
                var r = !1;
                (this.isLive || this.isLiveDvr) && (r = !0);
                var s = encodeURIComponent(this.bitrates.hls[0][1]);
                this.debug && console.log("RMP: Apple HLS to Flash init URL " + this.bitrates.hls[0][1]), d.src = s, d.isHls = "true", d.src_defaultAudioLabel = this.defaultFlashAudioLabel, d.plugin_hls = "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/rmp-hls.swf", d.hls_minbufferlength = this.flashHlsMinbufferlength, d.hls_lowbufferlength = this.flashHlsLowbufferlength, d.hls_maxbufferlength = this.flashHlsMaxbufferlength, d.hls_seekmode = "ACCURATE", d.hls_live_flushurlcache = r.toString()
            } else {
                if (!this.bitrates.mp4 || !this.bitrates.mp4[0] || this.isLive) return void U.call(this);
                this.startingBitratePath = this.bitrates.mp4[0][1], d.src = encodeURIComponent(this.startingBitratePath)
            }
            if (this.hasCC) {
                for (var t = this.ccFiles, u = t.length, v = "", w = 0, x = u; x > w; w++) v += t[w][0] + "," + t[w][1] + "," + t[w][2], w !== x - 1 && (v += ",");
                d.ccString = v, d.ccTint = this.flashCCTextColor, d.ccBgTint = this.flashCCBgColor, d.ccBgAlpha = this.flashCCBgAlpha.toString(), d.ccFontSize = this.flashCCFontSize
            }
            if (this.logo && (d.logo = this.logo, d.logoLoc = this.logoLoc, this.logoWatermark && (d.logoWatermark = !0)), this.ads && (d.ads = "true", this.adFlashTagUrl ? d.adTagUrl = encodeURIComponent(this.adFlashTagUrl) : d.adTagUrl = encodeURIComponent(this.adTagUrl), "2.0" === this.adFlashVpaidVersion && (d.adFlashVpaidVersion = this.adFlashVpaidVersion), "" !== this.adCustomMessage && (d.adCustomMessage = this.adCustomMessage), this.adCountDown && (d.adCountDown = this.adCountDown), this.adFlashTagWaterfall[0] ? (this.adFlashTagWaterfall.forEach(function (a, b, c) {
                    c[b] = encodeURIComponent(a)
            }), d.adTagWaterfall = this.adFlashTagWaterfall.join()) : this.adTagWaterfall[0] && (this.adTagWaterfall.forEach(function (a, b, c) {
                    c[b] = encodeURIComponent(a)
            }), d.adTagWaterfall = this.adTagWaterfall.join())), null !== this.adSchedule) {
                var y = "";
                for (var z in this.adSchedule)
                    if ("midroll" !== z) y += z + "§", y += this.adSchedule[z][0] + "§";
                    else {
                        y += z + "§";
                        for (var A = 0, B = this.adSchedule[z].length; B > A; A++) y += this.adSchedule[z][A][0] + "§", y += this.adSchedule[z][A][1] + "§"
                    }
                "§" === y.charAt(y.length - 1) && (y = y.replace(/§$/gi, "")), d.adSchedule = encodeURIComponent(y)
            }
            if (this.hasGa) {
                var C = '<value key="reTrackConfig" type="class" class="com.realeyes.osmf.plugins.tracking.google.config.RETrackConfig"><account><![CDATA[' + this.trackingId + "]]></account><url><![CDATA[" + rmpEnv.currentUrl + ']]></url><event name="percentWatched" category="' + this.gaCategory + '" action="percentWatched"><marker percent="0" label="Percent viewed (Flash)" /><marker percent="25" label="Percent viewed (Flash)" /><marker percent="50" label="Percent viewed (Flash)" /><marker percent="75" label="Percent viewed (Flash)" /><marker percent="100" label="Percent viewed (Flash)" /></event><event name="pageView" /><updateInterval><![CDATA[250]]></updateInterval></value>';
                d.plugin_ga = "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/GTrackPlugin.swf", d["ga_http://www.realeyes.com/osmf/plugins/tracking/google"] = encodeURIComponent(C)
            }
            var D = "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/rmp-dark.swf";
            ("s2" === this.skin || "s4" === this.skin) && (D = "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/rmp-light.swf"), "s5" === this.skin && (D = "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/rmp-orange.swf"), swfobject.embedSWF(D, g, "100%", "100%", "11.1", "//cdn.radiantmediatechs.com/rmp/2.6.2/flash/expressInstall.swf", d, {
                allowFullScreen: "true",
                allowScriptAccess: "always",
                wmode: this.flashWMode,
                bgColor: "#000000"
            }, {
                name: g
            }), j(e, "rmp-waiting");
            var E = e.getElementsByClassName("rmp-loading-spin")[0];
            E && e.removeChild(E);
            var F = e.getElementsByClassName("rmp-overlay-button")[0];
            F && e.removeChild(F)
        },
        oa = function () {
            if (this.dom.video = null, this.flashFallBack && swfobject.hasFlashPlayerVersion("11.1"))
                if (this.isHTML5 = !1, this.isFlash = !0, this.debug && console.log("RMP: Flash minimun version 11.1 detected. Running Flash now."), this.ads && this.adBlockCheck)
                    if ("undefined" == typeof blockAdBlock) {
                        var a = "//cdn.radiantmediatechs.com/rmp/2.6.2/js/rmp-blockadblock.min.js",
                            c = b.createElement("script");
                        c.src = a, c.addEventListener("load", this.adsBlockCheck.bind(this));
                        var d = function () {
                            console.log("RMP: could not retrieve adBlockCheck file > loading ads anyway"), na.call(this)
                        };
                        c.addEventListener("error", d.bind(this)), this.dom.head.appendChild(c)
                    } else blockAdBlock.clearEvent(), blockAdBlock.onDetected(this.adBlockDetected.bind(this)), blockAdBlock.onNotDetected(this.adBlockNotDetected.bind(this)), blockAdBlock.check();
                else na.call(this);
            else U.call(this)
        },
        pa = function () {
            if ("undefined" != typeof swfobject) oa.call(this);
            else {
                var a = "//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js",
                    c = b.createElement("script");
                c.src = a, c.addEventListener("load", oa.bind(this)), c.addEventListener("error", function () {
                    console.log("RMP: failed to get Flash component")
                }), this.dom.head.appendChild(c)
            }
        },
        qa = function () {
            return this.debug && console.log("RMP: Flash-first mode requested"), swfobject && swfobject.hasFlashPlayerVersion("11.1") && (this.hasHls || this.hasMp4) ? void oa.call(this) : (_.call(this), void (this.hasDash264 && rmpEnv.okDash264 ? (this.readingDash264 = !0, this.startingBitratePath = this.bitrates.dash264[0][1], la.call(this), this.displayHTML5Player()) : this.hasHls && rmpEnv.okHls ? (this.readingHls = !0, this.startingBitratePath = this.bitrates.hls[0][1], ma.call(this), this.displayHTML5Player()) : rmpEnv.okMp4 && this.hasMp4 ? (this.readingMp4 = !0, this.startingBitratePath = this.bitrates.mp4[0][1], this.dom.video.src = this.startingBitratePath, this.displayHTML5Player()) : U.call(this)))
        },
        ra = function () {
            if ("undefined" != typeof swfobject) qa.call(this);
            else {
                var a = "//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js",
                    c = b.createElement("script");
                c.src = a, c.addEventListener("load", qa.bind(this));
                var d = this;
                c.addEventListener("error", function () {
                    console.log("RMP: Failed to get Flash player component"), qa.call(d)
                }), this.dom.head.appendChild(c)
            }
        },
        sa = function () {
            this.startingBitratePath = null, this.isLiveDvr && this.hasHls || this.flashFirst ? ra.call(this) : this.hasDash264 && rmpEnv.okDash264 || this.hasHls && rmpEnv.okHls || rmpEnv.okMp4 && this.hasMp4 ? (_.call(this), this.hasDash264 && rmpEnv.okDash264 ? (this.readingDash264 = !0, this.startingBitratePath = this.bitrates.dash264[0][1], la.call(this), this.displayHTML5Player()) : this.hasHls && rmpEnv.okHls ? (this.readingHls = !0, this.startingBitratePath = this.bitrates.hls[0][1], ma.call(this), this.displayHTML5Player()) : rmpEnv.okMp4 && this.hasMp4 ? (this.readingMp4 = !0, this.startingBitratePath = this.bitrates.mp4[0][1], this.dom.video.src = this.startingBitratePath, this.displayHTML5Player()) : U.call(this)) : pa.call(this)
        };
    RadiantMP.prototype.callAds = function () {
        var a;
        a = this.adImaTest ? "//imasdk.googleapis.com/js/sdkloader/ima3_test.js" : "//imasdk.googleapis.com/js/sdkloader/ima3.js";
        var c = b.createElement("script");
        c.src = a, this.adsPlaying = !1;
        var d = function () {
            this.adsInit = !0, this.initAds()
        };
        c.addEventListener("load", d.bind(this)), c.addEventListener("error", function () {
            console.log("RMP: could not retrieve JavaScript ads file")
        }), this.dom.head.appendChild(c)
    }, RadiantMP.prototype.initAds = function () {
        this.debug && console.log("RMP: initAds (SDK loaded)"), "undefined" != typeof google && this.dom.rmpAdContainer && this.dom.video && (google.ima.settings.setLocale(this.adLocale), "enabled" === this.adVpaidMode ? google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED) : "friendlyiframe" === this.adVpaidMode ? google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.INSECURE) : google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.DISABLED), google.ima.settings.setPlayerType("radiantmediaplayer"), google.ima.settings.setPlayerVersion("2.6.2"), this.adDisplayContainer = new google.ima.AdDisplayContainer(this.dom.rmpAdContainer, this.dom.video), this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer), this.adsManager = null, this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this)), this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this)), this.contentCompleteCalled = !1, this.isLinear = !1, this.adsLoaded = !1, this.adsPaused = !1, this.adDCInitialized = !1, this.adContentResumeRequested = !1, "" !== this.adCustomMessage && "undefined" == typeof this.dom.rmpAdCustomMessage && (this.dom.rmpAdCustomMessage = b.createElement("div"), this.dom.rmpAdCustomMessage.className = "rmp-ad-custom-message", this.dom.rmpAdCustomMessage.textContent = this.adCustomMessage, this.dom.rmpAdCustomMessage.style.display = "none", this.dom.rmpOutline.appendChild(this.dom.rmpAdCustomMessage)))
    }, RadiantMP.prototype.requestAds = function (a) {
        if (this.debug && console.log("RMP: requestAds - " + a), "undefined" != typeof google) try {
            var b = new google.ima.AdsRequest;
            b.adTagUrl = a, b.forceNonLinearFullSlot = this.adForceNonLinearFullSlot, b.linearAdSlotWidth = this.widthPlayer, b.linearAdSlotHeight = this.heightPlayer, b.nonLinearAdSlotWidth = this.widthPlayer, b.nonLinearAdSlotHeight = this.heightPlayer - 38, this.adsLoader.requestAds(b)
        } catch (c) {
            this.dom.video.play()
        }
    }, RadiantMP.prototype.initialUserAction = function () {
        if (this.debug && console.log("RMP: initialUserAction for ads"), null !== this.adSchedule ? "undefined" != typeof this.adSchedule.preroll && "string" == typeof this.adSchedule.preroll[0] ? this.requestAds(this.adSchedule.preroll[0]) : this.requestAds("") : this.requestAds(this.adTagUrl), this.adDisplayContainer.initialize(), this.adDCInitialized = !0, rmpEnv.isMobile && this.readingDash264) this.dom.video.play(), this.dom.video.pause();
        else if (rmpEnv.isMobile && (this.readingHls || this.readingMp4)) {
            this.loadedMetadata = !1;
            var a = this;
            this.dom.video.addEventListener("loadedmetadata", function () {
                a.loadedMetadata = !0
            }), this.dom.video.load()
        }
    }, RadiantMP.prototype.adsPause = function () {
        this.adsManager && this.adsManager.pause()
    }, RadiantMP.prototype.adsResume = function () {
        this.adsManager && this.adsManager.resume()
    }, RadiantMP.prototype.adsGetVolume = function () {
        return this.adsManager ? this.adsManager.getVolume() : 0
    }, RadiantMP.prototype.adsSetVolume = function (a) {
        this.adsManager && this.adsManager.setVolume(a)
    }, RadiantMP.prototype.adsStop = function () {
        this.adsManager && this.adsManager.stop()
    };
    var ta = function (a) {
        var b = new google.ima.AdsRenderingSettings;
        b.restoreCustomPlaybackStateOnAdBreakComplete = !0, this.adsManager = a.getAdsManager(this.dom.video, b), this.processAdsManager(this.adsManager)
    };
    RadiantMP.prototype.onAdsManagerLoaded = function (a) {
        if (this.debug && console.log("RMP: adsManagerLoadedEvent"), this.loadedMetadata) ta.call(this, a);
        else var b = this,
            c = setInterval(function () {
                b.loadedMetadata && (ta.call(b, a), clearInterval(c))
            }, 200)
    }, RadiantMP.prototype.processAdsManager = function (a) {
        this.debug && console.log("RMP: processAdsManager"), a.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this)), a.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this)), a.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this));
        var b = [google.ima.AdEvent.Type.CLICK, google.ima.AdEvent.Type.SKIPPED, google.ima.AdEvent.Type.USER_CLOSE, google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, google.ima.AdEvent.Type.COMPLETE, google.ima.AdEvent.Type.ALL_ADS_COMPLETED, google.ima.AdEvent.Type.LOADED, google.ima.AdEvent.Type.STARTED, google.ima.AdEvent.Type.FIRST_QUARTILE, google.ima.AdEvent.Type.MIDPOINT, google.ima.AdEvent.Type.THIRD_QUARTILE, google.ima.AdEvent.Type.PAUSED, google.ima.AdEvent.Type.RESUMED, google.ima.AdEvent.Type.VOLUME_CHANGED];
        for (var c in b) a.addEventListener(b[c], this.onAdEvent.bind(this));
        try {
            a.init(this.widthPlayer, this.heightPlayer, google.ima.ViewMode.NORMAL), a.start()
        } catch (d) {
            this.dom.video.play()
        }
    }, RadiantMP.prototype.contentEnded = function () {
        this.contentCompleteCalled = !0, this.adsLoader.contentComplete()
    }, RadiantMP.prototype.onContentPauseRequested = function () {
        this.adContentResumeRequested = !1, this.dom.video.paused || this.dom.video.pause(), this.dom.video.removeEventListener("ended", this.endedRmp);
        var a = this.dom.container.getElementsByClassName("rmp-module");
        r(this.dom.rmpSeekBar), r(this.dom.rmpDuration), r(this.dom.rmpTimeElapsed);
        for (var b = 0, c = a.length; c > b; b++) i(a[b], "rmp-no-display")
    }, RadiantMP.prototype.onContentResumeRequested = function () {
        this.adContentResumeRequested = !0, this.adsPlaying = !1, this.dom.video.addEventListener("ended", this.endedRmp);
        var a = this.dom.container.getElementsByClassName("rmp-module");
        j(this.dom.rmpOutline, "rmp-no-display");
        for (var b = 0, c = a.length; c > b; b++) j(a[b], "rmp-no-display");
        this.dom.rmpSeekBar && !this.isLive && (!this.isLiveDvr || this.isLiveDvr && this.isVodDvr) && q(this.dom.rmpSeekBar), this.dom.rmpDuration && !this.isLive && (!this.isLiveDvr || this.isLiveDvr && this.isVodDvr) && q(this.dom.rmpDuration), this.contentCompleteCalled ? this.loop || (i(this.dom.rmpPlayPause, "rmp-i-play"), j(this.dom.rmpPlayPause, "rmp-i-pause"), z.call(this)) : this.dom.video.play(), (this.isLive || this.isLiveDvr && !this.isVodDvr) && "undefined" != typeof this.dom.rmpTimeElapsed && (this.dom.rmpTimeElapsed.textContent = "Live"), "undefined" != typeof this.dom.rmpAdCustomMessage && (this.dom.rmpAdCustomMessage.style.display = "none"), q(this.dom.rmpTimeElapsed), x.call(this), this.adCountDownTimer && clearInterval(this.adCountDownTimer), null === this.adSchedule || this.isLive || this.dom.container.addEventListener("timeupdate", this.adSchedulerCheckerFn)
    }, RadiantMP.prototype.uiAdsPlay = function () {
        x.call(this), this.adsPaused ? (i(this.dom.rmpPlayPause, "rmp-i-play"), j(this.dom.rmpPlayPause, "rmp-i-pause"), z.call(this)) : (j(this.dom.rmpPlayPause, "rmp-i-play"), i(this.dom.rmpPlayPause, "rmp-i-pause"), A.call(this))
    }, RadiantMP.prototype.onAdEvent = function (a) {
        var c = this.dom.container,
            d = this.dom.rmpTimeElapsed,
            e = a.getAd();
        if (this.debug && console.log(a), this.isLinear = !1, "undefined" != typeof e) {
            var f = e.isLinear();
            if (f && (this.isLinear = !0, j(this.dom.rmpAdContainer, "rmp-ad-overlay")), a.type === google.ima.AdEvent.Type.LOADED) return this.adsLoaded = !0, this.isLinear || (i(this.dom.rmpAdContainer, "rmp-ad-overlay"), null === this.adSchedule || this.isLive || this.dom.container.addEventListener("timeupdate", this.adSchedulerCheckerFn), this.onContentResumeRequested()), f && -1 === e.getDuration() && i(this.dom.rmpOutline, "rmp-no-display"), void l("adLoaded", c);
            if (a.type === google.ima.AdEvent.Type.COMPLETE || a.type === google.ima.AdEvent.Type.ALL_ADS_COMPLETED) {
                if (this.adsPlaying = !1, this.adsLoaded = !1, a.type === google.ima.AdEvent.Type.ALL_ADS_COMPLETED) {
                    if (l("adAllAdsCompleted", c), !this.adContentResumeRequested && rmpEnv.isIos) {
                        var g = this;
                        setTimeout(function () {
                            g.adContentResumeRequested || g.onContentResumeRequested()
                        }, 1e3)
                    }
                } else l("adComplete", c);
                return void (!d || this.isLive || this.isDvr || (d.textContent = t(this.dom.video.currentTime)))
            }
            if (a.type === google.ima.AdEvent.Type.RESUMED && this.isLinear) return this.adsPaused = !1, this.uiAdsPlay(), void l("adResumed", c);
            if (a.type === google.ima.AdEvent.Type.PAUSED && this.isLinear) return this.adsPaused = !0, this.uiAdsPlay(), void l("adPaused", c);
            if (a.type === google.ima.AdEvent.Type.STARTED) {
                if (this.adsPlaying = !0, x.call(this), this.isLinear && (rmpEnv.fs[this.id] && this.resizeAds(), this.adsPaused = !1, this.uiAdsPlay(), y.call(this), "undefined" != typeof this.dom.rmpAdCustomMessage && (this.dom.rmpAdCustomMessage.style.display = "block"), this.adCountDown)) {
                    var h = this;
                    this.adCountDownTimer && clearInterval(this.adCountDownTimer), this.adCountDownTimer = setInterval(function () {
                        "undefined" == typeof h.dom.rmpAdCustomMessage && (h.dom.rmpAdCustomMessage = b.createElement("div"), h.dom.rmpAdCustomMessage.className = "rmp-ad-custom-message", h.dom.rmpAdCustomMessage.textContent = h.adCustomMessage, h.dom.rmpAdCustomMessage.style.display = "block", h.dom.rmpOutline.appendChild(h.dom.rmpAdCustomMessage));
                        var a = h.adsManager.getRemainingTime();
                        "" !== h.adCustomMessage ? h.dom.rmpAdCustomMessage.textContent = h.adCustomMessage : h.dom.rmpAdCustomMessage.textContent = "", "number" == typeof a && -1 !== a && (a = Math.round(a), h.dom.rmpAdCustomMessage.textContent = h.dom.rmpAdCustomMessage.textContent + " (" + a + " s)")
                    }, 1e3)
                }
                return void l("adStarted", c)
            }
            if (a.type === google.ima.AdEvent.Type.CLICK) return this.isLinear ? this.adsPause() : this.dom.video.paused || l("click", this.dom.rmpPlayPause), void l("adClick", c);
            if (a.type === google.ima.AdEvent.Type.SKIPPED) return void l("adSkipped", c);
            if (a.type === google.ima.AdEvent.Type.USER_CLOSE) return void l("adUserClose", c);
            if (a.type === google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED) return void l("adContentPauseRequested", c);
            if (a.type === google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED) return void l("adContentResumeRequested", c);
            if (a.type === google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED) return void l("adContentResumeRequested", c);
            if (a.type === google.ima.AdEvent.Type.FIRST_QUARTILE) return void l("adFirstQuartile", c);
            if (a.type === google.ima.AdEvent.Type.MIDPOINT) return void l("adMidPoint", c);
            if (a.type === google.ima.AdEvent.Type.THIRD_QUARTILE) return void l("adThirdQuartile", c);
            if (a.type === google.ima.AdEvent.Type.THIRD_QUARTILE) return void l("adThirdQuartile", c)
        }
    }, RadiantMP.prototype.onAdError = function (a) {
        if (this.debug) {
            console.log(a);
            var b = a.getError();
            console.log("RMP: getError - " + b.toString()), console.log("RMP: getErrorCode - " + b.getErrorCode()), console.log("RMP: getInnerError - " + b.getInnerError()), console.log("RMP: getMessage - " + b.getMessage()), console.log("RMP: getType - " + b.getType()), console.log("RMP: getVastErrorCode - " + b.getVastErrorCode())
        }
        this.adTagWaterfall[0] ? (this.adTagUrl = this.adTagWaterfall[0], this.adTagWaterfall.length > 0 && this.adTagWaterfall.shift(), this.adsManager && this.adsManager.destroy(), this.requestAds(this.adTagUrl)) : (this.adsManager && this.adsManager.destroy(), this.onContentResumeRequested()), l("adError", this.dom.container)
    }, RadiantMP.prototype.resizeAdsHtml5 = function () {
        var b = 0,
            c = 0;
        rmpEnv.nativeFullscreen ? (b = a.screen.width, c = a.screen.height) : (b = rmpEnv.widthViewport, c = rmpEnv.heightViewport), rmpEnv.fs[this.id] ? this.adsManager.resize(b, c, google.ima.ViewMode.FULLSCREEN) : this.adsManager.resize(this.widthPlayer, this.heightPlayer, google.ima.ViewMode.NORMAL)
    };
    var ua = function () {
        var a;
        a = this.isLive ? this.liveAdSchedulerCheckerIndex : Math.round(this.getCurrentTime() / 1e3);
        var b, c, d = this.adSchedule.midroll;
        "undefined" != typeof d && "undefined" != typeof d[0] && 2 === d[0].length && (b = d[0][0], c = d[0][1], "number" == typeof b && "number" == typeof a && a > b && (this.adsManager && this.adsManager.destroy(), "string" == typeof c && this.requestAds(c), this.adSchedule.midroll.shift(), this.isLive || this.dom.container.removeEventListener("timeupdate", this.adSchedulerCheckerFn)))
    },
        va = function () {
            "undefined" != typeof this.adSchedule.postroll && "string" == typeof this.adSchedule.postroll[0] && (this.adsManager && this.adsManager.destroy(), this.requestAds(this.adSchedule.postroll[0])), this.dom.container.removeEventListener("ended", this.adSchedulerEndedFn)
        };
    RadiantMP.prototype.initAdScheduler = function () {
        if (this.adSchedule) {
            if (this.adSchedulerCheckerFn = ua.bind(this), this.isLive) {
                var a = this;
                this.liveAdSchedulerCheckerIndex = 0, this.liveAdSchedulerChecker = null, this.dom.container.addEventListener("play", function () {
                    clearInterval(a.liveAdSchedulerChecker), a.liveAdSchedulerChecker = setInterval(function () {
                        (!a.adsPlaying || a.adsLoaded && !a.isLinear) && (a.liveAdSchedulerCheckerIndex++, a.adSchedulerCheckerFn())
                    }, 1e3)
                }), this.dom.container.addEventListener("pause", function () {
                    clearInterval(a.liveAdSchedulerChecker)
                })
            } else this.dom.container.addEventListener("timeupdate", this.adSchedulerCheckerFn);
            this.adSchedulerEndedFn = va.bind(this), this.dom.container.addEventListener("ended", this.adSchedulerEndedFn)
        }
    };
    var wa = function () {
        this.settings.ads = !1, this.updatePlayer(this.settings)
    };
    RadiantMP.prototype.adBlockNotDetected = function () {
        this.debug && console.log("No ad block detected > loading ads"), this.isHTML5 ? this.callAds() : this.isFlash && na.call(this)
    }, RadiantMP.prototype.adBlockDetected = function () {
        if (this.debug && console.log("Ad block detected"), l("adBlockDetected", this.dom.container), this.adBlockDisplayMessage) {
            var a = b.createElement("div");
            a.className = "rmp-ad-block-container";
            var c = b.createElement("div");
            c.className = "rmp-ad-block-outer-message";
            var d = b.createElement("div");
            if (d.className = "rmp-ad-block-message", this.adBlockDetectedRestrictive) d.textContent = this.adBlockDetectedRestrictiveMessage, c.appendChild(d);
            else {
                d.textContent = this.adBlockDetectedPermissiveMessage, c.appendChild(d);
                var e = b.createElement("div");
                e.className = "rmp-ad-block-button", e.textContent = "RELOAD", e.addEventListener("click", wa.bind(this)), d.appendChild(e)
            }
            a.appendChild(c), a.addEventListener("click", s), this.dom.container.appendChild(a)
        }
    }, RadiantMP.prototype.adsBlockCheck = function () {
        "undefined" == typeof blockAdBlock ? this.adBlockDetected.call(this) : (blockAdBlock.onDetected(this.adBlockDetected.bind(this)), blockAdBlock.onNotDetected(this.adBlockNotDetected.bind(this)))
    }, RadiantMP.prototype.toggleFullscreen = function () {
        rmpEnv.focusFS = this.id, b.fullscreenElement || b.mozFullScreenElement || b.webkitFullscreenElement || b.msFullscreenElement ? b.exitFullscreen ? b.exitFullscreen() : b.webkitExitFullscreen ? b.webkitExitFullscreen() : b.mozCancelFullScreen ? b.mozCancelFullScreen() : b.msExitFullscreen && b.msExitFullscreen() : b.documentElement.requestFullscreen ? b.documentElement.requestFullscreen() : b.documentElement.mozRequestFullScreen ? b.documentElement.mozRequestFullScreen() : b.documentElement.webkitRequestFullscreen ? b.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : b.documentElement.msRequestFullscreen && !rmpEnv.isWindowsPhone ? b.documentElement.msRequestFullscreen() : rmpEnv.fs[this.id] ? rmpEnv.fs[this.id] && (rmpEnv.isIos[0] ? this.dom.video.webkitExitFullscreen() : L.call(this)) : rmpEnv.isIos[0] ? this.dom.video.webkitEnterFullscreen() : L.call(this)
    }, RadiantMP.prototype.displayHTML5Player = function () {
        var c = this;
        if (i(this.dom.container, "rmp-preparing"), this.hideContextMenu && this.dom.video.addEventListener("contextmenu", function (a) {
                a.preventDefault()
        }), this.hasGa) {
            var d;
            if (this.loadstart) S.call(this);
            else {
                var f = 0;
                d = setInterval(function () {
                    c.loadstart && (clearInterval(d), S.call(c)), f++, f > 50 && (clearInterval(d), S.call(c))
                }, 200)
            }
        }
        var h = "",
            k = "";
        if (h += '<div class="rmp-outline"><div class="rmp-play-pause rmp-i rmp-i-play"></div><div class="rmp-time-elapsed"></div>', h += '<div class="rmp-seek-bar"><div class="rmp-time-total"><div class="rmp-loaded"></div><div class="rmp-current"></div>', rmpEnv.isMobile || this.isLive || this.isLiveDvr || (h += '<div class="rmp-indicator"><span class="rmp-time-indicator"></span><span class="rmp-arrow"></span></div>'), h += '<div class="rmp-handle"></div></div></div> <div class="rmp-duration"></div>', h += '<div class="rmp-volume rmp-i rmp-i-volume-up"><div class="rmp-background-volume"><div class="rmp-volume-bar"></div><div class="rmp-current-volume"><div class="rmp-handle-volume"></div></div></div></div><div class="rmp-fullscreen rmp-i rmp-i-resize-full"></div></div>', this.dom.container.insertAdjacentHTML("beforeend", h), this.ads) {
            var n = '<div class="rmp-ad-container"></div>';
            this.dom.video.parentNode.insertAdjacentHTML("afterend", n), this.dom.rmpAdContainer = this.dom.container.getElementsByClassName("rmp-ad-container")[0]
        }
        if (this.sharing) {
            var p = '<div class="rmp-sharing rmp-module"><div class="rmp-module-button"><span class="rmp-i rmp-i-share"></span></div><div class="rmp-area-sharing"><div class="rmp-facebook"><span class="rmp-i rmp-i-facebook"></span></div><div class="rmp-twitter"><span class="rmp-i rmp-i-twitter"></span></div><div class="rmp-gplus"><span class="rmp-i rmp-i-gplus"></span></div></div></div>';
            this.dom.container.insertAdjacentHTML("beforeend", p), this.dom.rmpSharing = this.dom.container.getElementsByClassName("rmp-sharing")[0]
        }
        if (this.nav) {
            var q = '<div class="rmp-nav rmp-module"><div class="rmp-module-button"><span class="rmp-i rmp-i-nav"></span></div></div>';
            this.dom.container.insertAdjacentHTML("beforeend", q), this.dom.rmpNav = this.dom.container.getElementsByClassName("rmp-nav")[0]
        }
        if (this.dom.rmpOutline = this.dom.container.getElementsByClassName("rmp-outline")[0], this.dom.rmpPlayPause = this.dom.container.getElementsByClassName("rmp-play-pause")[0], this.dom.rmpVolume = this.dom.container.getElementsByClassName("rmp-volume")[0], this.dom.rmpFullscreen = this.dom.container.getElementsByClassName("rmp-fullscreen")[0], this.dom.rmpTimeElapsed = this.dom.container.getElementsByClassName("rmp-time-elapsed")[0], this.dom.rmpSeekBar = this.dom.container.getElementsByClassName("rmp-seek-bar")[0], this.dom.rmpDuration = this.dom.container.getElementsByClassName("rmp-duration")[0], this.displayStreams && (this.readingMp4 && this.bitrates.mp4 && this.bitrates.mp4.length > 1 || this.readingDash264 && this.bitrates.dash264 && this.bitrates.dash264.length > 0)) {
            var r, u = '<div class="rmp-hd rmp-module"><div class="rmp-module-button"><span class="rmp-i rmp-i-streams"></span></div><div class="rmp-outer-hd">',
                v = [];
            this.readingMp4 ? r = this.bitrates.mp4 : this.readingDash264 && (r = this.bitrates.dash264);
            for (var w = this.startingBitratePath, y = 0; y < r.length; y++) v = r[y], "start" !== v[0].toLowerCase() && (u += v[1] === w ? '<div class="rmp-quality rmp-quality-active rmp-q' + y + '" data-src="' + v[1] + '">' : '<div class="rmp-quality rmp-q' + y + '" data-src="' + v[1] + '">', u += "" + v[0] + "</div>");
            u += "</div></div>", this.dom.container.insertAdjacentHTML("beforeend", u), this.dom.rmpTextHd = this.dom.container.getElementsByClassName("rmp-text-hd")[0], this.dom.rmpHd = this.dom.container.getElementsByClassName("rmp-hd")[0], this.dom.rmpHd.addEventListener("click", s), this.dom.rmpOuterHd = this.dom.container.getElementsByClassName("rmp-outer-hd")[0], this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1
        } else this.displayStreams = !1;
        if (this.hasCC && (k += '<div class="rmp-cc rmp-module"><div class="rmp-module-button"><span class="rmp-i rmp-i-cc"></span></div></div>', this.dom.container.insertAdjacentHTML("beforeend", k), this.dom.rmpCC = this.dom.container.getElementsByClassName("rmp-cc")[0]), this.bgVideo && i(this.dom.container, "rmp-bg-wrapper"), this.logo && (this.logo.match("png$") || this.logo.match("PNG$"))) {
            var z = b.createElement("img");
            z.alt = "Video player logo", this.logoWatermark ? z.className = "rmp-logo rmp-force-show" : z.className = "rmp-logo", z.src = this.logo, this.dom.container.appendChild(z), this.dom.rmpLogo = this.dom.container.getElementsByClassName("rmp-logo")[0];
            var A = function (b) {
                b.stopPropagation(), "touchstart" === b.type && (b.preventDefault(), x.call(this)), "" !== this.logoLoc && a.open(this.logoLoc, "_blank")
            };
            this.dom.rmpLogo.addEventListener("touchstart", A.bind(this)), this.dom.rmpLogo.addEventListener("click", A.bind(this))
        }
        if (this.touchDown = !1, this.dom.video.addEventListener("pause", C.bind(this)), this.dom.video.addEventListener("play", D.bind(this)), !this.isLive) {
            this.dom.rmpCurrent = this.dom.container.getElementsByClassName("rmp-current")[0], this.dom.rmpHandle = this.dom.container.getElementsByClassName("rmp-handle")[0], this.dom.rmpTimeTotal = this.dom.container.getElementsByClassName("rmp-time-total")[0];
            var B = function (a) {
                a.stopPropagation(), a.preventDefault();
                var b = (a.changedTouches[0].pageX - o(this.dom.rmpTimeTotal)) / m(this.dom.rmpTimeTotal);
                b >= 1 ? b = 1 : 0 > b && (b = 0), H.call(this, b), this.touchDown = !1
            };
            this.dom.rmpSeekBar.addEventListener("touchend", B.bind(this));
            var E = function (a) {
                a.preventDefault(), x.call(this), this.touchDown = !0;
                var b = (a.changedTouches[0].pageX - o(this.dom.rmpTimeTotal)) / m(this.dom.rmpTimeTotal) * 100;
                b >= 100 ? b = 100 : 0 > b && (b = 0), g(this.dom.video.duration) && (this.dom.rmpCurrent.style.width = b + "%", this.dom.rmpHandle.style.left = b + "%", this.dom.rmpTimeElapsed.textContent = t(b * this.dom.video.duration / 100))
            };
            this.dom.rmpSeekBar.addEventListener("touchmove", E.bind(this)), this.draggingTimeCursor = !1;
            var G = function (a) {
                this.debug && console.log("RMP: HTML5 time cursor updated"), this.draggingTimeCursor = !0;
                var b = o(this.dom.rmpTimeTotal),
                    c = (e(a) - b) / m(this.dom.rmpTimeTotal) * 100;
                c >= 100 ? c = 100 : 0 > c && (c = 0), g(this.dom.video.duration) && (this.dom.rmpCurrent.style.width = c + "%", this.dom.rmpHandle.style.left = c + "%", this.dom.rmpTimeElapsed.textContent = t(c * this.dom.video.duration / 100))
            },
                M = function (a) {
                    a.stopPropagation(), this.doRmpCursorFn = G.bind(this), this.dom.rmpSeekBar.addEventListener("mousemove", this.doRmpCursorFn)
                };
            this.dom.rmpSeekBar.addEventListener("mousedown", M.bind(this));
            var N = function (a) {
                a.stopPropagation();
                var b = (e(a) - o(this.dom.rmpTimeTotal)) / m(this.dom.rmpTimeTotal);
                H.call(this, b), this.draggingTimeCursor = !1, this.doRmpCursorFn && this.dom.rmpSeekBar.removeEventListener("mousemove", this.doRmpCursorFn)
            };
            this.dom.rmpSeekBar.addEventListener("mouseup", N.bind(this));
            var T = function () {
                this.doRmpCursorFn && this.dom.rmpSeekBar.removeEventListener("mousemove", this.doRmpCursorFn), this.draggingTimeCursor = !1
            };
            this.dom.rmpSeekBar.addEventListener("mouseleave", T.bind(this));
            var U = function () {
                if (this.debug && console.log("RMP: HTML5 timeupdate event"), l("timeupdate", this.dom.container), !(this.isLive || this.isLiveDvr && !this.isVodDvr) && this.dom.video && this.dom.rmpCurrent && this.dom.rmpHandle && this.dom.rmpTimeElapsed) {
                    if (!this.draggingTimeCursor && !this.touchDown) {
                        var a = 100 / this.dom.video.duration * this.dom.video.currentTime;
                        this.dom.rmpCurrent.style.width = a + "%", this.dom.rmpHandle.style.left = a + "%"
                    }
                    this.draggingTimeCursor || (this.dom.rmpTimeElapsed.textContent = t(this.dom.video.currentTime))
                }
            };
            this.dom.video.addEventListener("timeupdate", U.bind(this))
        }
        if (this.volumeOn = !0, !rmpEnv.isMobile) {
            this.storedVolume = 1, this.dom.rmpCurrentVolume = this.dom.container.getElementsByClassName("rmp-current-volume")[0], this.dom.rmpBackgroundVolume = this.dom.container.getElementsByClassName("rmp-background-volume")[0], this.dom.rmpBackgroundVolume.style.display = "none", this.dom.rmpVolumeBar = this.dom.container.getElementsByClassName("rmp-volume-bar")[0], this.dom.rmpVolume.addEventListener("touchstart", I.bind(this)), this.dom.rmpVolume.addEventListener("click", I.bind(this)), this.dom.video.addEventListener("volumechange", J.bind(this));
            var V = function (a) {
                a.stopPropagation(), "block" !== this.dom.rmpBackgroundVolume.style.display && (this.dom.rmpBackgroundVolume.style.display = "block")
            };
            this.dom.rmpVolume.addEventListener("mouseenter", V.bind(this));
            var W = function (a) {
                a.stopPropagation(), "none" !== this.dom.rmpBackgroundVolume.style.display && (this.dom.rmpBackgroundVolume.style.display = "none")
            };
            this.dom.rmpVolume.addEventListener("mouseleave", W.bind(this));
            var X = function (a) {
                a.stopPropagation(), K.call(this, a)
            };
            this.dom.rmpBackgroundVolume.addEventListener("click", X.bind(this))
        }
        if (this.displayStreams && this.bitrates.mp4 && this.readingMp4 && this.bitrates.mp4.length > 1 && da.call(this), this.nav) {
            var Y = '<div class="rmp-playbackrate"><div class="rmp-rate">x0.5</div><div class="rmp-rate rmp-rate-active">x1</div><div class="rmp-rate">x1.5</div><div class="rmp-rate">x2</div></div>';
            this.dom.rmpNav.insertAdjacentHTML("beforeend", Y), this.dom.rmpPlayback = this.dom.container.getElementsByClassName("rmp-playbackrate")[0], this.dom.rmpPlayback.addEventListener("click", function (a) {
                a.stopPropagation()
            }), this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1;
            var Z = function (a) {
                a.stopPropagation(), "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.dom.captionsMenu && "none" !== this.dom.captionsMenu.style.display && (this.dom.captionsMenu.style.display = "none", this.captionsMenuVisible = !1), this.dom.rmpOuterHd && "none" !== this.dom.rmpOuterHd.style.display && (this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1), this.dom.rmpAreaSharing && "none" !== this.dom.rmpAreaSharing.style.display && (this.dom.rmpAreaSharing.style.display = "none", this.rmpAreaSharingVisible = !1), this.dom.rmpOuterAudios && "none" !== this.dom.rmpOuterAudios.style.display && (this.dom.rmpOuterAudios.style.display = "none", this.rmpOuterAudiosVisible = !1), this.dom.rmpPlayback && (this.rmpPlaybackVisible ? (this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1) : (this.dom.rmpPlayback.style.display = "block", this.rmpPlaybackVisible = !0))
            };
            this.dom.rmpNav.addEventListener("touchstart", Z.bind(this)), this.dom.rmpNav.addEventListener("click", Z.bind(this)), this.dom.rmpRate = this.dom.rmpPlayback.getElementsByClassName("rmp-rate");
            for (var $ = this.dom.rmpRate.length, _ = function (a, b) {
                    b.stopPropagation(), "touchstart" === b.type && (b.preventDefault(), x.call(this));
                    var c = this.dom.rmpRate[a].textContent;
                    c = parseFloat(c.replace("x", "")), Q.call(this, c);
                    for (var d = 0; $ > d; d++) j(this.dom.rmpRate[d], "rmp-rate-active");
                    i(this.dom.rmpRate[a], "rmp-rate-active")
            }, aa = 0; $ > aa; aa++) this.dom.rmpRate[aa].addEventListener("touchstart", _.bind(this, aa)), this.dom.rmpRate[aa].addEventListener("click", _.bind(this, aa))
        }
        if (this.sharing && rmpEnv.currentUrl) {
            this.dom.rmpAreaSharing = this.dom.container.getElementsByClassName("rmp-area-sharing")[0], this.dom.rmpAreaSharing.addEventListener("click", s), this.dom.rmpAreaSharing.style.display = "none", this.rmpAreaSharingVisible = !1;
            var ba = function (a) {
                a.stopPropagation(), "touchstart" === a.type && (a.preventDefault(), x.call(this)), this.dom.captionsMenu && "none" !== this.dom.captionsMenu.style.display && (this.dom.captionsMenu.style.display = "none", this.captionsMenuVisible = !1), this.dom.rmpOuterHd && "none" !== this.dom.rmpOuterHd.style.display && (this.dom.rmpOuterHd.style.display = "none", this.rmpOuterHdVisible = !1), this.dom.rmpPlayback && "none" !== this.dom.rmpPlayback.style.display && (this.dom.rmpPlayback.style.display = "none", this.rmpPlaybackVisible = !1), this.dom.rmpOuterAudios && "none" !== this.dom.rmpOuterAudios.style.display && (this.dom.rmpOuterAudios.style.display = "none", this.rmpOuterAudiosVisible = !1), this.rmpAreaSharingVisible ? (this.dom.rmpAreaSharing.style.display = "none", this.rmpAreaSharingVisible = !1) : (this.dom.rmpAreaSharing.style.display = "block", this.rmpAreaSharingVisible = !0)
            };
            this.dom.rmpSharing.addEventListener("touchstart", ba.bind(this)), this.dom.rmpSharing.addEventListener("click", ba.bind(this)), this.dom.facebook = this.dom.container.getElementsByClassName("rmp-facebook")[0], this.dom.twitter = this.dom.container.getElementsByClassName("rmp-twitter")[0], this.dom.gplus = this.dom.container.getElementsByClassName("rmp-gplus")[0];
            var ca = "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(rmpEnv.currentUrl),
                ea = "https://twitter.com/share?url=" + encodeURIComponent(rmpEnv.currentUrl),
                fa = "https://plus.google.com/share?url=" + encodeURIComponent(rmpEnv.currentUrl);
            this.dom.facebook.addEventListener("touchstart", P.bind(this, ca)), this.dom.facebook.addEventListener("click", P.bind(this, ca)), this.dom.twitter.addEventListener("touchstart", P.bind(this, ea)), this.dom.twitter.addEventListener("click", P.bind(this, ea)), this.dom.gplus.addEventListener("touchstart", P.bind(this, fa)), this.dom.gplus.addEventListener("click", P.bind(this, fa))
        }
        rmpEnv.isIos[0] ? (this.dom.video.addEventListener("webkitbeginfullscreen", function () {
            l("enterfullscreen", c.dom.container)
        }), this.dom.video.addEventListener("webkitendfullscreen", function () {
            l("exitfullscreen", c.dom.container)
        })) : (rmpEnv.manageFS[this.id] = L.bind(this), b.addEventListener("webkitfullscreenchange", rmpEnv.manageFS[this.id]), b.addEventListener("mozfullscreenchange", rmpEnv.manageFS[this.id]), b.addEventListener("fullscreenchange", rmpEnv.manageFS[this.id]), b.addEventListener("MSFullscreenChange", rmpEnv.manageFS[this.id]));
        var ga = function (a) {
            a.stopPropagation(), a.preventDefault(), x.call(this), this.toggleFullscreen()
        };
        this.dom.rmpFullscreen.addEventListener("touchstart", ga.bind(this));
        var ha = function (a) {
            a.stopPropagation(), this.toggleFullscreen()
        };
        this.dom.rmpFullscreen.addEventListener("click", ha.bind(this)), rmpEnv.isMobile || this.isLive || this.isLiveDvr || (this.dom.rmpIndicator = this.dom.container.getElementsByClassName("rmp-indicator")[0], O.apply(this)), this.volumeNow = 0, this.currentTime = 0;
        var ia = function (a) {
            R.call(this, a)
        };
        this.dom.container.addEventListener("keydown", ia.bind(this)), this.dom.container.addEventListener("mousemove", x.bind(this)), this.dom.rmpPlayPause = this.dom.container.getElementsByClassName("rmp-play-pause")[0], this.dom.rmpPlayPause.addEventListener("touchend", F.bind(this)), this.dom.rmpPlayPause.addEventListener("click", F.bind(this)), this.dom.rmpOverlayButton.addEventListener("touchend", F.bind(this)), this.dom.rmpOverlayButton.addEventListener("click", F.bind(this));
        var ja = !1,
            ka = function (a) {
                a.stopPropagation(), this.debug && console.log("RMP: touchstart event on container"), ja = !0, x.call(this)
            };
        this.dom.container.addEventListener("touchstart", ka.bind(this));
        var la = function (a) {
            if (!ja) {
                if (a.stopPropagation(), this.debug && console.log("RMP: click event on container"), this.ads && this.adsPlaying && this.isLinear) return;
                l("click", this.dom.rmpPlayPause)
            }
        };
        this.dom.container.addEventListener("click", la.bind(this)), this.dom.rmpOutline.addEventListener("click", s);
        var ma = function (a) {
            a.stopPropagation(), a.preventDefault(), x.call(this)
        };
        this.dom.rmpOutline.addEventListener("touchstart", ma.bind(this)), this.dom.rmpLoadingSpin && this.dom.rmpLoadingSpin.addEventListener("click", function (a) {
            a.stopPropagation()
        }), this.dom5Ready = !0, this.loadedMetadata && !this.readyFired && (this.readyFired = !0, l("ready", this.dom.container)), l("fiveready", this.dom.container)
    };
    var xa = function (a, b) {
        return Math.floor(Math.random() * (b - a + 1) + a)
    },
        ya = function (c) {
            var d = xa(0, 9);
            if (d > 7) {
                var e, f = new XMLHttpRequest,
                    g = a.location.hostname;
                f.open("GET", c, !0), f.timeout = 5e3, f.onreadystatechange = function () {
                    if (4 === f.readyState && 200 === f.status && (e = JSON.parse(f.responseText), e && e.sites)) {
                        var a = e.sites;
                        a.forEach(function (a) {
                            if (a[0] && g.indexOf(a[0]) > -1 && a[1] && "ok" !== a[1])
                                for (var c = b.getElementsByClassName("rmp-container"), d = 0, e = c.length; e > d; d++) k(c[d])
                        })
                    }
                }, f.send()
            }
        },
        za = function (b) {
            var c = ["cGxheS5tdg==", "Y2hubC50dg==", "ZGRucy5uZXQ=", "cmlkZ2VjcmVzdC1jYS5nb3Y=", "c2h1ZnUudHY=", "dW5lLmNvbS5jbw==", "dmlkZW8yZ28uY29tLmJy", "ZGF0YS1zb2x1dGlvbnMuY29tLmF1", "ZmVkc3F1YXJlLmNvbQ==", "c3BlbGRlbmFhci5vcmc=", "aG9zcGVkYWRvcy5jb20=", "bm9yZGp5c2tlLmRr", "YmlibGVxbGQuY29tLmF1", "YmV0aGVsdHYudHY="],
                d = 0;
            if (c.forEach(function (c) {
                    if ("undefined" != typeof a.atob) {
                        var e = atob(c);
                        b.indexOf(e) > -1 && (d = 1)
            } else d = 2
            }), "undefined" != typeof a.atob) {
                var e = atob("Z29sZW0uZGU="),
                    f = atob("cmFkaWFudG1lZGlhcGxheWVyLmNvbQ==");
                (b.indexOf(e) > -1 || b.indexOf(f) > -1) && (d = 2)
            } else d = 2;
            return d
        },
        Aa = function (b, c, d) {
            var e, f = za(c);
            if (f > 0) return f;
            if ("undefined" == typeof a.atob) return 2;
            e = atob(b), e = e.replace("*_%", ""), e = e.replace("%_*", "");
            var g = !1;
            if (e.indexOf("?") > -1) {
                var h = e.split("?");
                "rom5dasis30db0A" === h[1] && (g = !0, e = e.replace("?rom5dasis30db0A", ""))
            }
            var i, j = !1;
            if (e.indexOf("!") > -1) {
                i = e.split("!");
                var k = {
                    s: 0,
                    c: 1,
                    o: 2,
                    g: 3,
                    i: 4,
                    k: 5,
                    m: 6,
                    e: 7,
                    q: 8,
                    a: 9
                },
                    l = i[0].toString().replace(/[scogikmeqa]/g, function (a) {
                        return k[a]
                    });
                parseInt(l, 10);
                var m = new Date,
                    n = m.getTime();
                if ("number" != typeof n) return 0;
                if (m = Math.round(m.getTime() / 1e3), m > l) return 0;
                j = !0, e = i[1]
            }
            var o = {
                "=": "a",
                "+": "b",
                y: "c",
                z: "d",
                v: "e",
                u: "f",
                d: "g",
                b: "h",
                s: "i",
                q: "j",
                a: "k",
                c: "l",
                i: "m",
                k: "n",
                e: "o",
                g: "p",
                n: "q",
                o: "r",
                0: "s",
                7: "t",
                8: "u",
                9: "v",
                4: "w",
                5: "x",
                6: "y",
                1: "z",
                2: ".",
                3: "-"
            },
                p = e.replace(/[=+yzvudbsqacikegno0789456123]/g, function (a) {
                    return o[a]
                }),
                q = !1,
                r = !1;
            if ("string" == typeof c) {
                var s = c;
                if ("localhost" === s || "127.0.0.1" === s || s.indexOf("192.168.") > -1 || s.indexOf("172.") > -1 || s.indexOf("10.") > -1) {
                    var t = s.split("."),
                        u = parseInt(t[1], 10);
                    if (s.indexOf("172.") > -1 && (16 > u || u > 31)) return 0;
                    if (s.indexOf("10.") > -1 && (0 > u || u > 255)) return 0;
                    q = !0
                }
                s = s.replace(/\d/g, ""), s.indexOf(p) > -1 && (r = !0)
            }
            return "https:" !== d && "http:" !== d ? 0 : j && (r || q) ? 2 : g && (r || q) ? (g && r && ya("https://cdn.radiantmediatechs.com/rmp/rr/js/rmp-vg.json"), 2) : g || j || !r && !q ? 0 : 1
        },
        Ba = function (b, c, d) {
            var e = !0;
            if (b) {
                var f = Aa(b, c, d);
                if (0 === f && (e = !1), "undefined" != typeof a.atob && this.lsCuop && this.lsCuop.length > 0)
                    for (var g = 0, h = this.lsCuop.length; h > g; g++)
                        if (c.indexOf(atob(this.lsCuop[g])) > -1) {
                            e = !1;
                            break
                        }
                this.ads && 1 === f && (e = !1)
            } else "https:" !== d && "http:" !== d && (e = !1), this.isLive = !1, this.isLiveDvr = !1, this.hlsToFlash = !1, this.hasHls = !1, this.hasDash264 = !1, this.hasGa = !1, this.ads = !1, this.bgVideo = !1, this.flashFirst = !1, this.endOfVideoPoster = this.poster;
            return e
        },
        Ca = function (a) {
            if (!a) throw k(this.dom.container), new Error("Invalid license key for Radiant Media Player")
        };
    RadiantMP.prototype.init = function (c) {
        b.addEventListener("DOMContentLoaded", M.bind(this)), a.addEventListener("load", M.bind(this)), this.dom = {}, this.dom.html = b.getElementsByTagName("html")[0], this.dom.body = b.getElementsByTagName("body")[0], this.dom.head = b.getElementsByTagName("head")[0];
        var d = c,
            e = this._defaults;
        this.dom.container = b.getElementById(this.id), this.dom.video = b.createElement("video");
        var f = {};
        for (var g in e)
            if ("undefined" != typeof d[g]) {
                if (typeof d[g] != typeof e[g]) return console.log("RMP: invalid input settings (typeof) for Radiant Media Player - " + g), null;
                f[g] = d[g]
            } else f[g] = e[g];
        this.settings = f;
        var h = f.pathToRmpFiles.trim();
        if (h) {
            this.pathToRmpFiles = h.trim();
            var j = h.substr(h.length - 1);
            "/" !== j && (this.pathToRmpFiles = h + "/")
        } else this.pathToRmpFiles = this._defaults.pathToRmpFiles;
        if (i(this.dom.container, "rmp-container"), this.widthPlayer = parseInt(f.width, 10), this.heightPlayer = parseInt(f.height, 10), rmpEnv.originalWidthPlayer[this.id] = this.widthPlayer, rmpEnv.ratio[this.id] = this.widthPlayer / this.heightPlayer, this.updateCalled) {
            var k, l = this.dom.container.parentElement;
            l && (k = m(l)), k && (k < this.widthPlayer ? (this.dom.container.style.width = k + "px", this.dom.container.style.height = k / rmpEnv.ratio[this.id] + "px") : (this.dom.container.style.width = this.widthPlayer + "px", this.dom.container.style.height = this.heightPlayer + "px"))
        } else this.dom.container.style.width = this.widthPlayer + "px", this.dom.container.style.height = this.heightPlayer + "px";
        if (this.updateCalled = !1, this.poster = f.poster.trim(), this.endOfVideoPoster = f.endOfVideoPoster.trim(), this.debug = f.debug, this.debug && console.log(rmpEnv), this.dashDebug = f.dashDebug, this.dashFirefox = f.dashFirefox, this.crossorigin = f.crossorigin, this.bitrates = f.bitrates, rmpEnv.isLegacy) {
            this.bitrates.hls && this.bitrates.hls[0] && rmpEnv.okHls ? this.legacyMobileLoc = this.bitrates.hls[0][1] : this.bitrates.mp4 && this.bitrates.mp4[0] && rmpEnv.okMp4 ? this.legacyMobileLoc = this.bitrates.mp4[0][1] : this.legacyMobileLoc = null, this.debug && console.log("RMP: legacyMobileLoc: " + this.legacyMobileLoc);
            var n;
            return void (this.legacyMobileLoc && (n = '<video width="100%" height="100%" src="' + this.legacyMobileLoc + '" poster="' + this.poster + '" controls></video>', this.dom.container.insertAdjacentHTML("afterbegin", n), rmpEnv.resize[this.id] = M.bind(this), a.addEventListener("resize", rmpEnv.resize[this.id]), a.addEventListener("orientationchange", rmpEnv.resize[this.id])))
        }
        if (this.skin = f.skin.trim(), "s1" !== this.skin && "s2" !== this.skin && "s3" !== this.skin && "s4" !== this.skin && "s5" !== this.skin && (this.skin = "s3"), this.ads = f.ads, rmpEnv.isWindowsPhone && (this.ads = !1), this.adSchedule = f.adSchedule, this.logoWatermark = f.logoWatermark, (this.ads || this.logoWatermark || rmpEnv.isWindowsPhone) && "s3" !== this.skin && "s4" !== this.skin && "s5" !== this.skin && (this.skin = "s3"), "s5" === this.skin && i(this.dom.container, "rmp-i-alt"), !b.getElementById("rmp-dress-code")) { /*var o = b.createElement("link"); o.type = "text/css", o.rel = "stylesheet", o.id = "rmp-dress-code", o.href = "//cdn.radiantmediatechs.com/rmp/2.6.2/css/rmp-" + this.skin + ".min.css", this.dom.head.appendChild(o)*/ }
        this.dom5Ready = !1, i(this.dom.container, "rmp-waiting"), i(this.dom.video, "rmp");
        var p = '<div class="rmp-overlay-button"><span class="rmp-i rmp-i-play"></span></div><div class="rmp-loading-spin"><div class="rect1"></div><div class="rect2"></div><div class="rect3"></div><div class="rect4"></div><div class="rect5"></div></div>';
        this.dom.container.insertAdjacentHTML("afterbegin", p), this.dom.rmpOverlayButton = this.dom.container.getElementsByClassName("rmp-overlay-button")[0], this.dom.rmpLoadingSpin = this.dom.container.getElementsByClassName("rmp-loading-spin")[0], this.autoplay = f.autoplay, rmpEnv.isMobile && (this.autoplay = !1, i(this.dom.container, "rmp-mobile")), this.loop = f.loop, this.muted = f.muted, this.delayToFade = f.delayToFade, this.defaultFlashAudioLabel = f.defaultFlashAudioLabel, this.defaultDashAudioTrack = f.defaultDashAudioTrack, this.hideContextMenu = f.hideContextMenu, this.logo = f.logo.trim(), this.logoLoc = f.logoLoc.trim(), this.sharing = f.sharing, this.trackingId = f.trackingId.trim(), this.hasGa = f.hasGa, this.gaCategory = f.gaCategory.trim(), this.isLive = f.isLive, this.isLiveDvr = f.isLiveDvr, (this.isLive || this.isLiveDvr) && i(this.dom.container, "rmp-live"), this.nav = f.nav, (this.isLive || this.isLiveDvr || rmpEnv.isAndroid[0] || rmpEnv.isWindowsPhone)/* && (this.nav = !1)*/, this.flashFallBack = f.flashFallBack, this.flashFallBack && (this.flashScaleMode = f.flashScaleMode, this.flashHlsMinbufferlength = f.flashHlsMinbufferlength, this.flashHlsLowbufferlength = f.flashHlsLowbufferlength, this.flashHlsMaxbufferlength = f.flashHlsMaxbufferlength, this.hlsToFlash = f.hlsToFlash, this.flashWMode = f.flashWMode, this.flashFirst = f.flashFirst, this.flashDebug = f.flashDebug), this.licenseKey = f.licenseKey.trim(), this.hideControls = f.hideControls, this.bgVideo = f.bgVideo, this.bgVideoRendering = f.bgVideoRendering, this.bgVideo && (this.ads = !1, "zoom" === this.bgVideoRendering ? (this.flashScaleMode = "zoom", i(this.dom.video, "rmp-bg-video-zoom")) : (this.flashScaleMode = "letterbox", i(this.dom.video, "rmp-bg-video-letterbox"))), rmpEnv.fs[this.id] = !1, this.readingMp4 = !1, this.readingDash264 = !1, this.readingHls = !1, this.isFlash = !1, this.isHTML5 = !0, this.displayStreams = f.displayStreams, this.hasMp4 = !1, this.hasHls = !1, this.hasDash264 = !1, "undefined" != typeof this.bitrates.mp4 && (this.hasMp4 = !0, (this.isLive || this.isLiveDvr) && (this.hasMp4 = !1)), "undefined" != typeof this.bitrates.hls && (this.hasHls = !0), this.dom.dashPoster = null, "undefined" != typeof this.bitrates.dash264 && (this.hasDash264 = !0, (rmpEnv.isAndroid[0] && rmpEnv.isAndroid[1][0] < 5 || rmpEnv.isAndroidChrome[0] && rmpEnv.isAndroidChrome[1][0] < 46) && (this.hasDash264 = !1), this.isLiveDvr && (this.hasDash264 = !1), rmpEnv.isFirefox && this.isLive && !this.dashFirefox && (this.hasDash264 = !1)), this.ccFiles = f.ccFiles, this.hasCC = !1, this.ccFiles && this.ccFiles.length > 0 && !this.isLive && (this.hasCC = !0, this.flashCCFontSize = f.flashCCFontSize, this.flashCCTextColor = f.flashCCTextColor, this.flashCCBgColor = f.flashCCBgColor, this.flashCCBgAlpha = f.flashCCBgAlpha), this.dom.container.setAttribute("tabindex", "0"), this.dom.video.setAttribute("tabindex", "-1"), this.adsFirst = !0, this.adTagUrl = f.adTagUrl, !this.ads || "" === this.adTagUrl && null === this.adSchedule ? this.ads = !1 : (this.adLocale = f.adLocale.trim(), this.adCustomMessage = f.adCustomMessage.trim(), this.adTagWaterfall = f.adTagWaterfall, this.adFlashTagWaterfall = f.adFlashTagWaterfall, this.adFlashTagUrl = f.adFlashTagUrl, this.adFlashVpaidVersion = f.adFlashVpaidVersion, this.adVpaidMode = f.adVpaidMode, this.adBlockCheck = f.adBlockCheck, this.adBlockDisplayMessage = f.adBlockDisplayMessage, this.adBlockDetectedRestrictive = f.adBlockDetectedRestrictive, this.adBlockDetectedRestrictiveMessage = f.adBlockDetectedRestrictiveMessage, this.adBlockDetectedPermissiveMessage = f.adBlockDetectedPermissiveMessage, this.adCountDown = f.adCountDown, this.adImaTest = f.adImaTest, this.adForceNonLinearFullSlot = f.adForceNonLinearFullSlot), "undefined" != typeof a.atob && (this.lsCuop = ["a29rb2tvLmNvbQ=="]);
        var q = a.location.hostname;
        q = q.toLowerCase();
        var r = a.location.protocol;
        r = r.toLowerCase();
        var s = Ba.call(this, this.licenseKey, q, r);
        Ca.call(this, s), sa.call(this), rmpEnv.resize[this.id] = M.bind(this), a.addEventListener("orientationchange", rmpEnv.resize[this.id]), a.addEventListener("resize", rmpEnv.resize[this.id])
    }, RadiantMP.prototype.getPaused = function () {
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.dom.video.paused : this.isFlash && b && (a = b.getPaused()), "undefined" != typeof a ? a : null
    }, RadiantMP.prototype.getCurrentTime = function () {
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.dom.video.currentTime : this.isFlash && b && (a = b.getCurrentTime()), "undefined" != typeof a && g(a) ? a = Math.round(1e3 * a) : null
    }, RadiantMP.prototype.getDuration = function () {
        this.debug && console.log("RMP: JS API - getDuration method called");
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.dom.video.duration : this.isFlash && b && (a = b.getDuration()), "undefined" != typeof a && g(a) ? a = Math.round(1e3 * a) : null
    }, RadiantMP.prototype.getPlayerMode = function () {
        var a = null;
        return a = this.isHTML5 ? "html5" : this.isFlash ? "flash" : "nosupport"
    }, RadiantMP.prototype.getVolume = function () {
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.dom.video.volume : this.isFlash && b && (a = b.getVolume()), g(a) ? a : null
    }, RadiantMP.prototype.getVolumeAds = function () {
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.adsGetVolume() : this.isFlash && b && (a = b.flashGetVolumeAds()), g(a) ? a : null
    }, RadiantMP.prototype.getTypeAds = function () {
        var a, b = rmpEnv.flash["rmp-" + this.id];
        return this.isHTML5 ? a = this.isLinear : this.isFlash && b && (a = b.flashGetTypeAds()), "boolean" == typeof a ? a ? "linear" : "nonlinear" : null
    }, RadiantMP.prototype.play = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.dom.video.paused && this.dom.rmpPlayPause && l("click", this.dom.rmpPlayPause) : this.isFlash && a && a.getCanPlay() && a.play2()
    }, RadiantMP.prototype.resumeAds = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.adsResume() : this.isFlash && a && a.flashResumeAds()
    }, RadiantMP.prototype.pause = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? !this.dom.video.paused && this.dom.rmpPlayPause && l("click", this.dom.rmpPlayPause) : this.isFlash && a && a.getCanPause() && a.pause()
    }, RadiantMP.prototype.pauseAds = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.adsPause() : this.isFlash && a && a.flashPauseAds()
    }, RadiantMP.prototype.stop = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? (!this.dom.video.paused && this.dom.rmpPlayPause && l("click", this.dom.rmpPlayPause), this.dom.video.currentTime = 0) : this.isFlash && a && a.stop2()
    }, RadiantMP.prototype.stopAds = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.adsStop() : this.isFlash && a && a.flashStopAds()
    }, RadiantMP.prototype.seekTo = function (a) {
        if ("number" == typeof a) {
            var b = rmpEnv.flash["rmp-" + this.id],
                c = Math.round(a / 1e3 * 100) / 100;
            if (this.debug && console.log("RMP: JS API - seekTo with seekValue (seconds) " + c), this.isHTML5) try {
                this.dom.video.currentTime = c
            } catch (d) {
                return null
            } else if (this.isFlash && b) {
                if (this.flashNeverPlayed && (this.flashNeverPlayed = !1, this.play(), this.autoplay || this.pause()), !b.getCanSeek() || !b.canSeekTo(c)) return null;
                try {
                    b.seek(c)
                } catch (d) {
                    return null
                }
            }
        }
    }, RadiantMP.prototype.mute = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.volumeOn && this.dom.rmpVolume && l("click", this.dom.rmpVolume) : this.isFlash && a && a.setVolume(0)
    }, RadiantMP.prototype.setVolume = function (a) {
        if ("number" == typeof a) {
            var b = rmpEnv.flash["rmp-" + this.id];
            this.isHTML5 ? (!this.volumeOn && this.dom.rmpVolume && l("click", this.dom.rmpVolume), this.dom.video.volume = a) : this.isFlash && b && b.setVolume(a)
        }
    }, RadiantMP.prototype.setVolumeAds = function (a) {
        var b = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.adsSetVolume(a) : this.isFlash && b && b.flashSetVolumeAds(a)
    }, RadiantMP.prototype.resize = function () {
        M.call(this)
    }, RadiantMP.prototype.resizeAds = function () {
        var a = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? this.resizeAdsHtml5() : this.isFlash && a && a.flashResizeAds()
    }, RadiantMP.prototype.setPlaybackRate = function (a) {
        this.isHTML5 && "number" == typeof a && Q.call(this, a)
    }, RadiantMP.prototype.loadAds = function (a) {
        var b = rmpEnv.flash["rmp-" + this.id];
        this.isHTML5 ? (this.adsManager && this.adsManager.destroy(), this.requestAds(a)) : this.isFlash && b && b.flashLoadAds(a)
    }, RadiantMP.prototype.updatePlayer = function (c, d) {
        this.debug && console.log("RMP: JS API - updatePlayer method called"), this.updateCalled = !0, this.ads && this.adsManager && this.adsManager.destroy(), this.dashPlayer && (this.dashPlayer = null, this.dashContext = null), "undefined" != typeof swfobject && this.isFlash && (swfobject.removeSWF("rmp-" + this.id), this.debug && console.log("RMP: JS API - purged SWF from page")), this.dom.video && (this.dom.video.removeEventListener("error", this.error5Fn), this.dom.video.src = "", this.dom.rmpContent.removeChild(this.dom.video), this.dom.video = null);
        var e = b.createElement("div");
        e.id = this.id;
        var f = this.dom.container.nextSibling,
            g = this.dom.container.parentNode;
        g.removeChild(this.dom.container), g.insertBefore(e, f), this.dom = null, this.debug && console.log(c), b.removeEventListener("webkitfullscreenchange", rmpEnv.manageFS[this.id]), b.removeEventListener("mozfullscreenchange", rmpEnv.manageFS[this.id]), b.removeEventListener("fullscreenchange", rmpEnv.manageFS[this.id]), b.removeEventListener("MSFullscreenChange", rmpEnv.manageFS[this.id]), a.removeEventListener("resize", rmpEnv.resize[this.id]), rmpEnv.fs[this.id] = !1, "undefined" != typeof d && d(e), this.init(c)
    }
}(window, document);